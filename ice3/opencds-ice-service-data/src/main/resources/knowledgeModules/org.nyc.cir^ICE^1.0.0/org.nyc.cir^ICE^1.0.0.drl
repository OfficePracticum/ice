/**
 * Copyright (C) 2015 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */ 
 
package org.nyc.cir.ICE_v1_0_0

import java.util.ArrayList
import java.util.Collection
import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.Map
import java.util.Set
import java.util.HashSet
import java.util.HashMap
import org.drools.spi.KnowledgeHelper
import org.joda.time.LocalDate;
import org.opencds.vmr.v1_0.internal.AdministrableSubstance
import org.opencds.vmr.v1_0.internal.ClinicalStatement
import org.opencds.vmr.v1_0.internal.ClinicalStatementRelationship
import org.opencds.vmr.v1_0.internal.EntityBase
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.ObservationResult
import org.opencds.vmr.v1_0.internal.SubstanceAdministrationEvent
import org.opencds.vmr.v1_0.internal.SubstanceAdministrationProposal
import org.opencds.vmr.v1_0.internal.concepts.ImmunizationConcept
import org.opencds.vmr.v1_0.internal.concepts.ObservationCodedValueConcept
import org.opencds.vmr.v1_0.internal.concepts.ObservationFocusConcept
import org.opencds.vmr.v1_0.internal.datatypes.BL
import org.opencds.vmr.v1_0.internal.datatypes.CD
import org.opencds.vmr.v1_0.internal.datatypes.INT
import org.opencds.vmr.v1_0.internal.datatypes.IVLDate
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseRule
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.LiveVirusFact
import org.cdsframework.ice.service.InconsistentConfigurationException
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.PayloadHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.Recommendation.RecommendationStatus
import org.cdsframework.ice.service.Schedule
import org.cdsframework.ice.service.configurations.ScheduleStaticTmpImpl
import org.cdsframework.ice.service.Season
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdata.tmp.SupportedDiseaseConcept
import org.cdsframework.ice.supportingdata.tmp.SupportedEvaluationConcept
import org.cdsframework.ice.supportingdata.tmp.SupportedFactConcept
import org.cdsframework.ice.supportingdata.tmp.SupportedImmunityConcept
import org.cdsframework.ice.supportingdata.tmp.SupportedRecommendationConcept
import org.cdsframework.ice.supportingdata.tmp.SupportedVaccineConcept
import org.cdsframework.ice.supportingdata.tmp.SupportedVaccineGroupConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetDoseInitializationTracker
import org.cdsframework.ice.service.TargetSeasons
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.service.TargetSeriesSelection
import org.cdsframework.ice.service.TargetSeriesSelection.SeriesSelectionStatus
import org.cdsframework.ice.service.TimePeriod
import org.cdsframework.ice.service.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine
import org.cdsframework.ice.service.VaccineComponent

import function org.joda.time.LocalDate.fromDateFields

// OpenCDS specific
global java.lang.String clientLanguage
global java.lang.String clientTimeZoneOffset
global java.lang.String focalPersonId
global java.util.Date evalTime
global java.util.Date patientAgeTimeOfInterest
global java.util.HashSet<String> assertions
global java.util.HashMap<String,Object> namedObjects

// global org.drools.runtime.KnowledgeContext kcontext


/*****************************************************************************************************************************************************************************/
// 															Initialize Immunization Schedule and other Reference Data
/*****************************************************************************************************************************************************************************/

///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData.Initialize Immunization Schedule" ruleflow-group "ImmunizationReferenceData"
	dialect "mvel"
   	when
		not Schedule()
	then
		kcontext.getKnowledgeRuntime().setGlobal("patientAgeTimeOfInterest", evalTime);
		Schedule s = new ScheduleStaticTmpImpl("Schedule_v1.0.0");
		insert(s);
		ICELogicHelper.logDRLDebugMessage("Initialize Immunization Schedule", "Entered Initialize Immunization Schedule; patientAgeTimeOfInterest " + patientAgeTimeOfInterest);		
end

///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData.Initialize Focal Person Id" ruleflow-group "ImmunizationReferenceData"
	no-loop true
	dialect "mvel"
	salience 10
   	when
   		not Schedule()
   		not LiveVirusFact()
   		not TargetSeasons()
		$evaluatedPerson : EvaluatedPerson(isFocalPerson() == true)
		eval(focalPersonId == null || focalPersonId.length() == 0)
	then
		String _RULENAME = kcontext.rule.name;
		kcontext.getKnowledgeRuntime().setGlobal("focalPersonId", $evaluatedPerson.getId());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Initialized Focal Person ID");		
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData: Initialize Live Virus Fact Object" ruleflow-group "ImmunizationReferenceData"
	dialect "mvel"
	when
		not (LiveVirusFact())
	then
		String _RULENAME = kcontext.rule.name;		
		LiveVirusFact lvd = new LiveVirusFact();
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Live Virus Fact Object Initialized");
		insert(lvd);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData: Initialize Target Seasons Fact Object" ruleflow-group "ImmunizationReferenceData"
	dialect "mvel"
	when
		not (TargetSeasons())
	then
		String _RULENAME = kcontext.rule.name;		
		TargetSeasons tseasons = new TargetSeasons(evalTime);
		insert(tseasons);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeasons Fact Object Initialized");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData: Load SeriesRules and TargetDoseInitializationTracker on to Fact List" ruleflow-group "ImmunizationReferenceData"
	dialect "java"
	salience 20
	when
		schedule: Schedule()
		not SeriesRules()
	then
		String _RULENAME = drools.getRule().getName();
		List<SeriesRules> allCandidates = schedule.getCandidateSeries();
		if (allCandidates != null) {
			Iterator<SeriesRules> iter = allCandidates.iterator();
			if (iter == null) {
				ICELogicHelper.logDRLDebugMessage(_RULENAME, "iter is null");
			}
			while(iter.hasNext()) {
				SeriesRules s = iter.next();
				if (s == null) {
					ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesRules S == null");
				}
				insert(s);
				ICELogicHelper.logDRLDebugMessage(_RULENAME, "Loaded SeriesRules object on the fact list: " + s.getSeriesName());
			}
		}
		TargetDoseInitializationTracker tdit = new TargetDoseInitializationTracker();
		insert(tdit);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Eval Time provided by OpenCDS: " + evalTime.toString());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData: Insert SeriesRules Seasons into TargetSeasons" ruleflow-group "ImmunizationReferenceData"
	dialect "mvel"
	salience 20
	when
		$tseasons : TargetSeasons()
		$sr : SeriesRules(seasons.size() > 0)
		$season : Season() from $sr.seasons
		not (Season(this == $season))
	then
		String _RULENAME = kcontext.rule.name;
		// Adds the Season to the list being tracked by TargetSeasons, and populates off-season end dates for Season (if any)
		$tseasons.addTargetSeason($season);
		insert($season);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Initial season inserted into working memory; TargetSeasons updated with Season: " + $season.toString());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData: Update Seasons in Working Memory with Information from TargetSeasons" ruleflow-group "ImmunizationReferenceData"
	dialect "mvel"
	salience 10
	no-loop true
	when
		$season : Season(isDefaultSeason() == false)
		$tseasons : TargetSeasons(containsTargetSeason($season))
	then
		String _RULENAME = kcontext.rule.name;
		// Adds the Season to the list being tracked by TargetSeasons, and populates off-season end dates for Season (if any)
		$tseasons.updateFullySpecifiedSeasonWithOffSeasonDates($season);
		update($season);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Season **updated** in working memory: " + $season.toString());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData: Update Fully-Specified Seasons in Series with Information from TargetSeasons" ruleflow-group "ImmunizationReferenceData"
	dialect "mvel"
	salience 5
	no-loop true
	when
		$tseasons : TargetSeasons()
		$sr : SeriesRules(seasons.size() > 0)
		$season : Season(isDefaultSeason() == false) from $sr.seasons
	then
		String _RULENAME = kcontext.rule.name;
		// Adds the Season to the list being tracked by TargetSeasons, and populates off-season end dates for Season (if any)
		$tseasons.updateFullySpecifiedSeasonWithOffSeasonDates($season);
		update($sr);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesRules Season **updated**: " + $season.toString());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ImmunizationReferenceData: Log TargetSeasons Tracked for this Request" ruleflow-group "ImmunizationReferenceData"
	dialect "mvel"
	salience -1
	when
		$tseasons : TargetSeasons()
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeasons: " + $tseasons.toString());
end

		
/*****************************************************************************************************************************************************************************/
// 															Identify Candidate Series Ruleflow Group - TargetSeries Initialization
/*****************************************************************************************************************************************************************************/

///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateSeriesIdentification: Initialize TargetSeries for non-seasonal vaccine groups" ruleflow-group "CandidateSeriesIdentification"
	dialect "mvel"
	salience 100
	when
		$schedule : Schedule()
		$s : SeriesRules(seasons == null || seasons.isEmpty())
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($s, $schedule);
		insert(ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries initialized: " + ts.toString());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateSeriesIdentification: Initialize TargetSeries for *Current* Season with Fully-Specified Season Parameters (if defined)" ruleflow-group "CandidateSeriesIdentification"
	dialect "mvel"
	salience 100
	when
		$s : SeriesRules(seasons != null, seasons.size() > 0, $vg : vaccineGroup)  
		$season : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, dateIsApplicableToSeason(evalTime)) from $s.seasons
		not (TargetSeries(seriesName == $s.seriesName, targetSeason != null, targetSeason.isDefaultSeason() == false, targetSeason == $season))
		$schedule : Schedule()
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($s, $schedule, $season);
		insert(ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());		
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateSeriesIdentification: Initialize *Current* Season TargetSeries with Default Season Parameters if Current Not Defined for the Vaccine Group" ruleflow-group "CandidateSeriesIdentification"
	dialect "mvel"
	salience 90
	when
		$s : SeriesRules($vg : vaccineGroup, seasons != null, seasons.size() > 0)
		$season : Season(isDefaultSeason() == true, dateIsApplicableToSeason(evalTime)) from $s.seasons
		not (Season(isDefaultSeason() == false, vaccineGroup == $vg, dateIsApplicableToSeason(evalTime)))  
		not (TargetSeries(seriesName == $s.seriesName, targetSeason != null, targetSeason == $season))
		$schedule : Schedule()
		$tseasons : TargetSeasons()
	then
		String _RULENAME = kcontext.rule.name;
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate($season, evalTime);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, $schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);		
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateSeriesIdentification: Initialize *Past* Season TargetSeries when Shots Administered with Fully-Specified Season Parameters if Fully-Specified Season Parameters Defined for the Season" ruleflow-group "CandidateSeriesIdentification"
	dialect "mvel"
	salience 80
	when
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, seasons.size() > 0)
		$season : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, $season.dateIsApplicableToSeason($shotDate)) from $s.seasons
		not (TargetSeries(seriesName == $s.seriesName, targetSeason != null, targetSeason == $season))
		$schedule : Schedule()
		eval($schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases($schedule.getVaccineByOpenCDSConceptTypeValue($occ), $schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($s, $schedule, $season);
		insert(ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());		
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateSeriesIdentification: Initialize *Past* Season TargetSeries when Shots Administered with Default Season Parameters if No Fully-Specified Season Parameters Defined for the Season" ruleflow-group "CandidateSeriesIdentification"
	dialect "mvel"
	salience 70
	when
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, seasons.size() > 0)
		$season : Season(isDefaultSeason() == true) from $s.seasons
		not Season(isDefaultSeason() == false, vaccineGroup == $vg, dateIsApplicableToSeason($shotDate))
		// Note: for TargetSeries, do not match on series name when there is a default seasons because we do not want a TargetSeries created for the default season if another TargetSeries
		// already handles that season
		not (TargetSeries(targetSeason != null, targetSeason == Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate($season, $shotDate))) 
		$schedule : Schedule()
		$tseasons : TargetSeasons()
		eval($schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases($schedule.getVaccineByOpenCDSConceptTypeValue($occ), $schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		// Create a fully-specified season for this specific year using the default month and day
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate($season, $shotDate);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, $schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());		
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateSeriesIdentification: Initialize TargetSeries when Shots Administered when One and Only One Season for Vaccine Group exists and no matching Fully-Specified Season Parameters or Default Season Defined for the Season" ruleflow-group "CandidateSeriesIdentification"
	dialect "mvel"
	salience 70
	when
		ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$s : SeriesRules($vg : vaccineGroup, seasons.size() > 0)
		not Season(isDefaultSeason() == true, vaccineGroup == $vg)
		// Condition: If there is only one season and above TS does not match it, then we can conclude that there is no seasonal TS that will match
		accumulate($accSeason : Season(vaccineGroup == $vg); $count : count($accSeason); $count == 1)		
		$season : Season(isDefaultSeason() == false, vaccineGroup == $vg, dateIsApplicableToSeason($shotDate) == false)
		not (TargetSeries(seriesName == $s.seriesName, targetSeason != null, targetSeason == $season))
		$schedule : Schedule()
		eval($schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases($schedule.getVaccineByOpenCDSConceptTypeValue($occ), $schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)		
	then
		String _RULENAME = kcontext.rule.name;
		TargetSeries ts = new TargetSeries($s, $schedule, $season);
		insert(ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());		
end


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                            Custom TargetSeries Initialization Rules Start Here - TODO: Move to DSLRs                                       //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////// Influenza TargetSeries Initialization Rules /////////////////////////////////////////////////

rule "CandidateSeriesIdentification: Initialize TargetSeries for *Current* *Influenza* Season with Most Recent Prior Season Rules if Current Season Not Defined but Prior Season is Defined" ruleflow-group "CandidateSeriesIdentification"
	dialect "mvel"
	salience 100
	when
		$s : SeriesRules($vg : vaccineGroup, $sseriesName : seriesName, vaccineGroup == SupportedVaccineGroupConcept.Influenza, seasons.size() > 0)
		not Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, dateIsApplicableToSeason(evalTime))
		$priorSeason : Season(isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, vaccineGroup == $vg, $priorSeasonStart : fullySpecifiedSeasonStartDate, 
			$priorSeasonStart.toDate() < evalTime, $priorSeasonName : seasonName)
		Number(intValue > 0) from accumulate($accseason : Season(this == $priorSeason) from $s.seasons, count($accseason))
		not Season(vaccineGroup == $vg, isDefaultSeason() == false, isDefinedBySeriesTableRules() == true, fullySpecifiedSeasonStartDate.isAfter($priorSeasonStart))
		not (TargetSeries(seriesName == $s.seriesName, vaccineGroup == $vg, targetSeason != null, targetSeason == 
			Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeasonName, $vg, false, $priorSeason.seasonStartMonth, 
				$priorSeason.seasonStartDay, $priorSeason.seasonEndMonth, $priorSeason.seasonEndDay), evalTime)))
		$schedule : Schedule()
		$tseasons : TargetSeasons()
	then
		String _RULENAME = kcontext.rule.name;
		int startMonth = $priorSeason.getSeasonStartMonth();
		int startDay = $priorSeason.getSeasonStartDay();
		int endMonth = $priorSeason.getSeasonEndMonth();
		int endDay = $priorSeason.getSeasonEndDay();
		Season fullySpecified = Season.constructFullySpecifiedSeasonFromDefaultSeasonAndDate(new Season($priorSeason.seasonName, $vg, false, startMonth, startDay, endMonth, endDay), evalTime);
		$tseasons.addTargetSeason(fullySpecified);
		TargetSeries ts = new TargetSeries($s, $schedule, fullySpecified);
		$s.addFullySpecifiedSeason(fullySpecified);
		insert(ts);
		insert(fullySpecified);
		update($s);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Seasonal* TargetSeries initialized: " + ts.toString());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "*Updated* TargetSeasons: " + $tseasons.toString());						
end


/*****************************************************************************************************************************************************************************/
// 															Identify Candidate Doses Ruleflow Group - TargetDoses Initialization
/*****************************************************************************************************************************************************************************/

///////// ***
// General Design rule... Do not Edit
// For each series that was identified as relevant, initialize each TargetSeries with TargetDoses. TargetDoses are created/initialized for all
// shots administered where the vaccine is used by the vaccine group, even if the Series itself does not permit that kind of vaccine to be used
// in any of its doses. This is so that shots administered with a vaccine present in the Vaccine Group will still be evaluated with a decision 
// should that TargetSeries be selected from which to forecast.
///////// ***
rule "CandidateDosesIdentification: Initialize TargetDose in *Non-Seasonal* TargetSeries" ruleflow-group "CandidateDosesIdentification"
	dialect "mvel"
	salience 50
	no-loop true
	when
		$i : ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		$sae : SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$ts : TargetSeries($vg : vaccineGroup, targetSeasonExists() == false, $tsid : targetSeriesIdentifier)
		$schedule : Schedule()
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, $schedule.getVaccineByOpenCDSConceptTypeValue($occ)) == true)
		// Condition: the administered vaccine targets one or more of the diseases handled for this vaccine group
		eval($schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases($schedule.getVaccineByOpenCDSConceptTypeValue($occ), $schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)
	then
		String _RULENAME = kcontext.rule.name;
		Vaccine administeredVaccine = $schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode());
		for (TargetDose initializedTargetDose : $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, $schedule)) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");	
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "CandidateDosesIdentification: Initialize TargetDose in *Seasonal* TargetSeries" ruleflow-group "CandidateDosesIdentification"
	dialect "mvel"
	salience 50
	no-loop true
	when
		$i : ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		$sae : SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$ts : TargetSeries($vg : vaccineGroup, targetSeason != null && targetSeason.dateIsApplicableToSeason($shotDate), $tsid : targetSeriesIdentifier)
		$schedule : Schedule()
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, $schedule.getVaccineByOpenCDSConceptTypeValue($occ)) == true)
		// Condition: the administered vaccine targets one or more of the diseases handled for this vaccine group
		eval($schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases($schedule.getVaccineByOpenCDSConceptTypeValue($occ), $schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)
	then
		String _RULENAME = kcontext.rule.name;
		Vaccine administeredVaccine = $schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode());
		for (TargetDose initializedTargetDose : $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, $schedule)) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");	
end

///////// ***
// General Design rule... Do not Edit
// Seasonal TargetDose Outlier Initialization Rule: TargetDose initialization rule for H1N1 or other "seasonal" series that have only one defined season and no default season 
// E.G. - Since there is only one season for H1N1 and no default season, any shots that come in will get associated with the existing TargetSeries even if it falls outside 
// of its season date. NOTE: ICE Schedule validation does not permit multiple seasons in a vaccine group if there is no default season defined.
///////// ***
rule "CandidateDosesIdentification: Initialize Outlier TargetDose into Existing TargetSeries" ruleflow-group "CandidateDosesIdentification"
	dialect "mvel"
	salience 50
	no-loop true
	when
		$i : ImmunizationConcept($ctid : conceptTargetId, $occ : openCdsConceptCode)
		$sae : SubstanceAdministrationEvent(id == $ctid, $shotDate : ICELogicHelper.extractSingularDateValueFromIVLDate(administrationTimeInterval))
		$ts : TargetSeries($vg : vaccineGroup, targetSeason != null && targetSeason.dateIsApplicableToSeason($shotDate) == false, $tsid : targetSeriesIdentifier)
		// Condition: there is no default season for this vaccine group
		not Season(vaccineGroup == $vg, isDefaultSeason() == true)
		// Condition: If there is only one season and above TS does not match it, then we can conclude that there is no seasonal TS that will match
		accumulate($accSeason : Season(vaccineGroup == $vg); $count : count($accSeason); $count == 1)
		$schedule : Schedule()
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, $schedule.getVaccineByOpenCDSConceptTypeValue($occ)) == true)
		// Condition: the administered vaccine targets one or more of the diseases handled for this vaccine group
		eval($schedule.vaccineTargetsOneOrMoreOfSpecifiedDiseases($schedule.getVaccineByOpenCDSConceptTypeValue($occ), $schedule.getDiseasesTargetedByVaccineGroup($vg)) == true)
	then
		String _RULENAME = kcontext.rule.name;
		Vaccine administeredVaccine = $schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode());
		for (TargetDose initializedTargetDose : $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, $schedule, true)) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed; TargetSeries " + $ts);	
end


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                            Custom TargetDose Initialization Rules Start Here - TODO: Move to DSLRs                                         //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////// PCV and PPSV Specific Series Initialization Rules /////////////////////////////////////////////////

// Specialized initialization rule for PCV and PPSV vaccine group
rule "CandidateDosesIdentification: Initialize TargetDose in PPSV or PCV Vaccine Group Series" ruleflow-group "CandidateDosesIdentification"
	dialect "java"
	salience 55
	no-loop true
	when
		$i : ImmunizationConcept($ctid : getConceptTargetId(), $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid)
		// SeriesRules fact check: Because according to NYC rules, the Pneumococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// (A Pneumococcal shot is sometimes be according to the rules associated with a series in the PCV vaccine group and sometimes associated with another 
		// a sries in a PPSV vaccine group. Thus, for PCV and PPSV vaccine groups, we instead check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other pneumococcal initialization rules (such as patient's age) -- allow initialization of the proper series 
		// with the shot). This is actually more restrictive in terms of letting a TargetDose be initialized within a TargetSeries		
		$schedule : Schedule()
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), 
			getVaccineGroup() == SupportedVaccineGroupConcept.PPSV || getVaccineGroup() == SupportedVaccineGroupConcept.PCV, 
			vaccineIsAllowableInOneOrMoreDoseRules($schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, $schedule.getVaccineByOpenCDSConceptTypeValue($occ)) == true)
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = $schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, $schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");
end


// Specialized initalization rule for PPSV and PCV when CVX 109 is administered. When CVX 109 (Pneumococcal NOS) is recorded for a patient => 5 years old, 
// ICE will evaluate the shot as part of the pneumococcal polysaccharide group.
rule "CandidateDosesIdentification: Initialize CVX109 Dose Into PPSV Series if Patient >= 5yrs" ruleflow-group "CandidateDosesIdentification"
	dialect "java"
	salience 60
	no-loop true
	when
		// This is a PCV 109 shot
		$i : ImmunizationConcept($ctid : getConceptTargetId(), getOpenCdsConceptCode() == SupportedVaccineConcept._PCV_NOS109.getConceptCodeValue(), $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid, $saeAdminDate : getAdministrationTimeInterval())
		// SeriesRules fact check: Because according to NYC rules, the Pneumococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// (A Pneumococcal shot is sometimes be according to the rules associated with a series in the PCV vaccine group and sometimes associated with another 
		// a sries in a PPSV vaccine group. Thus, for PCV and PPSV vaccine groups, we simply check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other pneumococcal initialization rules (such as patient's age) -- allow initialization of the proper series 
		// with the shot)		
		$schedule : Schedule()
		// PSV Series
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), getVaccineGroup() == SupportedVaccineGroupConcept.PPSV, 
			vaccineIsAllowableInOneOrMoreDoseRules($schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, $schedule.getVaccineByOpenCDSConceptTypeValue($occ)) == true)
		$person : EvaluatedPerson()
		// Patient is >= 5 years of age at the time the shot was administered
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.getDemographics().getBirthTime(), ICELogicHelper.extractSingularDateValueFromIVLDate($saeAdminDate), "5y") >= 0)
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = $schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, $schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");
end


// Specialized initalization rule for PPSV and PCV when CVX 109 is administered. When CVX 109 (Pneumococcal NOS) is recorded for a patient < 5 years old, 
// ICE will evaluate the shot as part of the pneumococcal conjugate group. 
rule "CandidateDosesIdentification: Initialize CVX109 Dose Into PCV Series if Patient <5yrs" ruleflow-group "CandidateDosesIdentification"
	dialect "java"
	salience 60
	no-loop true
	when
		// This is a PCV 109 shot
		$i : ImmunizationConcept($ctid : getConceptTargetId(), getOpenCdsConceptCode() == SupportedVaccineConcept._PCV_NOS109.getConceptCodeValue(), $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid, $saeAdminDate : getAdministrationTimeInterval())
		// SeriesRules fact check: Because according to NYC rules, the Pneumococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// (A Pneumococcal shot is sometimes be according to the rules associated with a series in the PCV vaccine group and sometimes associated with another 
		// a sries in a PPSV vaccine group. Thus, for PCV and PPSV vaccine groups, we simply check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other pneumococcal initialization rules (such as patient's age) -- allow initialization of the proper series 
		// with the shot)		
		$schedule : Schedule()
		// PCV Series
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), getVaccineGroup() == SupportedVaccineGroupConcept.PCV, 
			vaccineIsAllowableInOneOrMoreDoseRules($schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, $schedule.getVaccineByOpenCDSConceptTypeValue($occ)) == true)
		$person : EvaluatedPerson()
		// Patient is >= 5 years of age at the time the shot was administered
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.getDemographics().getBirthTime(), ICELogicHelper.extractSingularDateValueFromIVLDate($saeAdminDate), "5y") < 0)	
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = $schedule.getVaccineByOpenCDSConceptTypeValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, $schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");
end



/*****************************************************************************************************************************************************************************/
// 															Record Disease Immunity
/*****************************************************************************************************************************************************************************/
 
// If the patient has immunity to a disease and it is on or after the immunity date, mark the patient as immune to the disease in the series
rule "DiseaseImmunityRecord.MarkImmuneToDiseaseIfOnOrAfterImmunityDate" ruleflow-group "DiseaseImmunityRecord"
	dialect "mvel"
	no-loop
	when
		$di : DiseaseImmunity($disease : disease, $immunityDate : dateOfImmunity <= evalTime)
		$targetSeries : TargetSeries($disease memberOf diseasesSupportedByThisSeries, targetSeason == null || targetSeason != null && targetSeason.fullySpecifiedSeasonStartDate.toDate() <= evalTime)
	then
		String _RULENAME = kcontext.rule.name;
		$targetSeries.markImmunityToSpecifiedDisease($disease, $immunityDate);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "for disease " + $disease + ", immunity date " + $immunityDate + " in TargetSeries " + $targetSeries.getSeriesName());
		update($targetSeries);
end



/*****************************************************************************************************************************************************************************/
// 															Evaluation of doses
/*****************************************************************************************************************************************************************************/


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.evaluateSeriesWhenNoTargetDosesForEvaluation" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		not TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS || status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS)
		$ts : TargetSeries(numberOfShotsAdministeredInSeries == 0, isHistoryEvaluationInitiated() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify ($ts) {
			setHistoryEvaluationInitiated(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "in TargetSeries " + $ts);
		setFocus("customEvaluationRule");		
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.setNextTargetDoseInNonSeasonalSeriesForEvaluation" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		not TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS || status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS)
		$td : TargetDose(status == DoseStatus.NOT_EVALUATED)
		$ts : TargetSeries(targetSeason == null, containsTargetDose($td), areNoEarlierAdministeredShotsNotEvaluated($td))
	then
		String _RULENAME = kcontext.rule.name;
		$tddosenumber = $ts.determineDoseNumberInSeries($td);
		modify($td) {
			setStatus(DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS),
			setDoseNumberInSeries($tddosenumber);
		}
		$ts.setHistoryEvaluationInitiated(true);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.setNextTargetDoseInSeasonalSeriesForEvaluation" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		not TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS || status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS)
		$td : TargetDose(status == DoseStatus.NOT_EVALUATED)
		$ts : TargetSeries(targetSeason != null, containsTargetDose($td), areNoEarlierAdministeredShotsNotEvaluated($td), 
			$vg : vaccineGroup, $tsid : targetSeriesIdentifier, $tseasonStartDate : targetSeason.fullySpecifiedSeasonStartDate)
	then
		String _RULENAME = kcontext.rule.name;
		$tddosenumber = $ts.determineDoseNumberInSeries($td);
		modify($td) {
			setStatus(DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS), 
			setDoseNumberInSeries($tddosenumber);
		}
		$ts.setHistoryEvaluationInitiated(true);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.setIsPrimarySeriesShotToTrueIfSeriesIsNotComplete" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		$td : TargetDose(status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS, isPrimarySeriesShot() == false)
		$ts : TargetSeries(containsTargetDose($td), isSeriesComplete() == false)	
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.EVALUATION_IN_PROCESS),
			setIsPrimarySeriesShot(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);
		setFocus("preEvaluationValidation");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.setIsPrimarySeriesShotToFalseIfSeriesIsComplete" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		$td : TargetDose(status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS, isPrimarySeriesShot() == true)
		$ts : TargetSeries(containsTargetDose($td), isSeriesComplete() == true)	
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.EVALUATION_IN_PROCESS),
			setIsPrimarySeriesShot(false);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);
		setFocus("preEvaluationValidation");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.primarySeriesShotAlreadyFalseAndSeriesIsComplete" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		$td : TargetDose(status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS, isPrimarySeriesShot() == false)
		$ts : TargetSeries(containsTargetDose($td), isSeriesComplete() == true)	
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.EVALUATION_IN_PROCESS);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);
		setFocus("preEvaluationValidation");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.primarySeriesShotAlreadyTrueAndSeriesNotComplete" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		$td : TargetDose(status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS, isPrimarySeriesShot() == true)
		$ts : TargetSeries(containsTargetDose($td), isSeriesComplete() == false)	
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.EVALUATION_IN_PROCESS);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);
		setFocus("preEvaluationValidation");
end


///////// ***
// General Design and Supplemental Series Table rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If the vaccine is administered after the immunity date recorded for *all* diseases targeted by the vaccine, mark the shot ACCEPTED. 
// Mark the status of the shot as EVALUATION_COMPLETE, to prevent other rules from overriding this ACCEPTED decision
//////// ***
rule "HistoryEvaluation: Check if Shot should be marked Accepted and Series Complete if Administered On or After Immunity Date" ruleflow-group "HistoryEvaluation"
	dialect "java"
	agenda-group "preEvaluationValidation"
	when
		$targetDose : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $diseasesTargetedByThisDose : vaccineComponent.allDiseasesTargetedForImmunity, $doseAdministrationDate : administrationDate)
		$targetSeries : TargetSeries(containsTargetDose($targetDose))
		do[invokeCustomEvaluationRules]
		$diseaseImmunityList : List(size == $diseasesTargetedByThisDose.size()) from 
			accumulate($di : DiseaseImmunity($d : disease, dateOfImmunity <= $doseAdministrationDate, $r : immunityReason, disease memberOf $diseasesTargetedByThisDose), collectList($di))
	then
		Iterator dilIter = $diseaseImmunityList.iterator();
		while (dilIter.hasNext()) {
			DiseaseImmunity diConsequence = (DiseaseImmunity) dilIter.next();
			$targetDose.addAcceptedReason(diConsequence.getImmunityReason());				
		}
		modify ($targetDose) { setStatus(DoseStatus.EVALUATION_COMPLETE) } ///// Note for docs: marking this dose valid, so we mark evaluation complete override all other "negative check" rules
		ICELogicHelper.logDRLDebugMessage(drools.getRule().getName(), $targetDose.toString() + " in TargetSeries " + $targetSeries .getSeriesName());
	then[invokeCustomEvaluationRules]
		ICELogicHelper.logDRLDebugMessage(drools.getRule().getName(), "Check complete.");
		drools.setFocus("makeNoteOfDuplicateShotSameDayIfAny");
end


///////// ***
// General Design rule... Do not Edit
// If this shot is a duplicate shot/same day shot as another shot in the series, mark its dose number the same as the previous shot (only one of the duplicate shot can be a valid dose)
///////// ***
rule "Duplicate Shots/Same Day: If this is a duplicate shot/same day, mark the dose number of the shot being evaluated as equal to prior shots administered on the same date; Invoke custom evaluation rules" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	agenda-group "makeNoteOfDuplicateShotSameDayIfAny"
	no-loop true
	when
		$td: TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $administrationDate : administrationDate, $tdAdministeredShotNumber : administeredShotNumberInSeries)
		$tdprev : TargetDose(administrationDate == $administrationDate, administeredShotNumberInSeries < $tdAdministeredShotNumber, $tdprevDoseNumber: doseNumberInSeries)
		$targetSeries : TargetSeries(containsTargetDose($td), containsTargetDose($tdprev))
	then
		String _RULENAME = kcontext.rule.name;
		modify ($td) {
			setDoseNumberInSeries($tdprevDoseNumber);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $targetSeries);
		setFocus("customEvaluationRule");
end


///////// ***
// General Design rule... Do not Edit
// If this shot is not a duplicate shot/same day shot as another shot in the series, just move on to the custom rules
///////// ***
rule "Not Duplicate Shot/Same Day: No duplicate shots to shot being evaluated; Invoke custom evaluation rules" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	agenda-group "makeNoteOfDuplicateShotSameDayIfAny"
	when
		$td: TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $administrationDate : administrationDate, $tdAdministeredShotNumber : administeredShotNumberInSeries, $tdAssociatedTargetSeries : associatedTargetSeries)
		not TargetDose(this != $td, administrationDate == $administrationDate, administeredShotNumberInSeries < $tdAdministeredShotNumber, associatedTargetSeries == $tdAssociatedTargetSeries)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $tdAssociatedTargetSeries);
		setFocus("customEvaluationRule");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.setDoseEvaluationStatusInvalid" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_COMPLETE, invalidReasons.empty == false) 
		$ts : TargetSeries(containsTargetDose($td))
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.INVALID),					// Also sets hasBeenEvaluated flag to true
			addDoseRuleProcessed(_RULENAME);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
		setFocus("postEvaluationCheck");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.setDoseEvaluationStatusAccepted" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_COMPLETE, invalidReasons.empty, acceptedReasons.empty == false)
		$ts : TargetSeries(containsTargetDose($td))
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.ACCEPTED),					// Also sets hasBeenEvaluated flag to true
			addDoseRuleProcessed(_RULENAME);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
		setFocus("postEvaluationCheck");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.setDoseEvaluationStatusValid" ruleflow-group "HistoryEvaluation"
	dialect "java"
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_COMPLETE, invalidReasons.empty, acceptedReasons.empty)
		$ts : TargetSeries(containsTargetDose($td))
	then
		String _RULENAME = drools.getRule().getName();
		modify($td) {
			addDoseRuleProcessed(_RULENAME),
			setStatus(DoseStatus.VALID);					// Also sets hasBeenEvaluated flag to true
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.getSeriesName());
		drools.setFocus("postEvaluationCheck");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "HistoryEvaluation.denoteDoseReadyForFinalEvaluationStatus" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	salience 60
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS)
		$ts : TargetSeries(containsTargetDose($td))
	then
		String _RULENAME = kcontext.rule.name;
		$td.setStatus(DoseStatus.EVALUATION_COMPLETE);
		update($td);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
end


///////// ***
// Supplemental Series Table rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
///////// ***
rule "HistoryEvaluation.markExtraneousDosesAcceptedIfCompleteForAllDiseaseTargetedByThisDose" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	salience 100
	activation-group "extraDoseCheck"
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $doseNumber : doseNumberInSeries) 
		$ts : TargetSeries(containsTargetDose($td), seriesRules.numberOfDosesInSeries < determineDoseNumberInSeriesForDiseasesTargetedByThisDose($td)) 
	then
		String _RULENAME = kcontext.rule.name;
		$td.addAcceptedReason(SupportedEvaluationConcept._EXTRA_DOSE_EVALUATION_REASON.getConceptCodeValue());
		$td.addDoseRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
end


///////// ***
// Supplemental Series Table rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
///////// ***
rule "HistoryEvaluation.checkIsAllowableVaccine" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	salience 100
	activation-group "allowableVaccineCheck"
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $vaccine : administeredVaccine, $doseNumber : doseNumberInSeries)
		$ts : TargetSeries(containsTargetDose($td), $doseNumber <= seriesRules.numberOfDosesInSeries, seriesRules.isAllowableVaccineForDoseRule($vaccine, $doseNumber) == false) 
	then
		String _RULENAME = kcontext.rule.name;
		ICEFactTypeFinding hef = new ICEFactTypeFinding(SupportedFactConcept._INVALID_VACCINE.getConceptCodeValue(), $td);
		insert(hef);		
		$td.addInvalidReason(SupportedEvaluationConcept._VACCINE_NOT_ALLOWED_FOR_THIS_DOSE.getConceptCodeValue());
		$td.addDoseRuleProcessed(_RULENAME);	
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
end


///////// ***
// Supplemental Series Table rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
///////// ***
rule "HistoryEvaluation.checkMinimumAgeVaccinePermitted" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	salience 100
	activation-group "minimumAgeVaccineCheck"
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $adminage : vaccineComponent.validMinimumAgeForUse != null)
		$ts : TargetSeries(containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.getDemographics().getBirthTime(), $td.getAdministrationDate(), $adminage) < 0)
	then
		String _RULENAME = kcontext.rule.name;
		ICEFactTypeFinding hef = new ICEFactTypeFinding(SupportedFactConcept._INVALID_VACCINE.getConceptCodeValue(), $td);
		insert(hef);
		$td.addInvalidReason(SupportedEvaluationConcept._BELOW_MINIMUM_AGE_VACCINE_REASON.getConceptCodeValue());
		$td.addDoseRuleProcessed(_RULENAME);	
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
end


///////// ***
// Supplemental Series Table rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
///////// ***
rule "HistoryEvaluation.checkMaximumAgeVaccinePermitted" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	salience 100
	activation-group "maximumAgeVaccineCheck"
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $adminage : vaccineComponent.validMaximumAgeForUse != null)
		$ts : TargetSeries(containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.getDemographics().getBirthTime(), $td.getAdministrationDate(), $adminage) > 0)
	then
		String _RULENAME = kcontext.rule.name;
		ICEFactTypeFinding hef = new ICEFactTypeFinding(SupportedFactConcept._INVALID_VACCINE.getConceptCodeValue(), $td);
		insert(hef)		
		$td.addInvalidReason(SupportedEvaluationConcept._INVALID_AGE_EVALUATION_REASON.getConceptCodeValue());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
end


///////// ***
// Series Table rule... Do not Edit
///////// ***
rule "HistoryEvaluation.evaluateVaccineGroupMinimumAge" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	activation-group "doseAgeCheck"
	salience 100
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $doseNumber : doseNumberInSeries) 
		$ts : TargetSeries(containsTargetDose($td), seriesRules.numberOfDosesInSeries >= $doseNumber)
		$person : EvaluatedPerson()
	then
		String _RULENAME = kcontext.rule.name;
		$ts.evaluateVaccineGroupMinimumAgeandRecordReason($person.demographics.birthTime, $td);
		if ($td.containsInvalidReason(SupportedEvaluationConcept._BELOW_MINIMUM_AGE_EVALUATION_REASON.getConceptCodeValue()) || 
			$td.containsInvalidReason(SupportedEvaluationConcept._INVALID_AGE_EVALUATION_REASON.getConceptCodeValue())) {
			ICEFactTypeFinding hef = new ICEFactTypeFinding(SupportedFactConcept._BELOW_MINIMUM_AGE.getConceptCodeValue(), $td);
			insert(hef)				
		}
		$td.addDoseRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts.seriesName);
end 


///////// ***
// Series table rule... Do not Edit
///////// ***
rule "HistoryEvaluation.evaluateVaccineGroupMinimumInterval" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	activation-group "doseIntervalCheck"
	salience 100
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $admindose: administeredShotNumberInSeries >= 2, $doseNumber : doseNumberInSeries, $tddate : administrationDate, 
			$tdAssociatedTargetSeries : associatedTargetSeries)
		$tdprev : TargetDose(associatedTargetSeries == $tdAssociatedTargetSeries, administeredShotNumberInSeries < $admindose, administrationDate < $tddate, $tdprevdate : administrationDate)
		not TargetDose(associatedTargetSeries == $tdAssociatedTargetSeries, administrationDate > $tdprevdate, administrationDate < $tddate)
		$ts : TargetSeries(containsTargetDose($td) && containsTargetDose($tdprev), seriesRules.numberOfDosesInSeries >= $doseNumber)
		not ICEFactTypeFinding(iceResultFinding == SupportedFactConcept._BELOW_MINIMUM_AGE.conceptCodeValue, associatedTargetDose == $tdprev, associatedTargetDose.doseNumberInSeries == 1)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.evaluateVaccineGroupMinimumIntervalAndRecordReason($td, $tdprev);
		if ($td.containsInvalidReason(SupportedEvaluationConcept._BELOW_MINIMUM_INTERVAL_EVALUATION_REASON.getConceptCodeValue())) {
			ICEFactTypeFinding hef = new ICEFactTypeFinding(SupportedFactConcept._BELOW_MINIMUM_INTERVAL.getConceptCodeValue(), $td);
			insert(hef)				
		}
		$td.addDoseRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);
end


///////// ***
// Series table rule... Do not Edit
///////// ***
rule "HistoryEvaluation: Evaluate minimum interval between first shot in seasonal series and most recent shot from a prior season" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	activation-group "doseIntervalCheckFromPreviousSeason"
	salience 100
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, administeredShotNumberInSeries == 1, $doseNumber : doseNumberInSeries)
		$ts : TargetSeries(containsTargetDose($td), seriesRules.numberOfDosesInSeries >= $doseNumber, targetSeason != null, $tseason : targetSeason, 
			$vaccineGroup : vaccineGroup, $tsid : targetSeriesIdentifier)
		$tsprev : TargetSeries(vaccineGroup == $vaccineGroup, targetDoses.size() > 0, targetSeriesIdentifier != $tsid, targetSeason != null, 
			$tseasonPrev : targetSeason, targetSeason.getFullySpecifiedSeasonStartDate().isBefore($tseason.getFullySpecifiedSeasonStartDate()))
		not TargetSeries(targetSeriesIdentifier != $tsprev.targetSeriesIdentifier, targetSeason != null, vaccineGroup == $vaccineGroup,
			targetDoses.size() > 0, targetSeason.fullySpecifiedSeasonStartDate.isAfter($tseasonPrev.getFullySpecifiedSeasonStartDate()) && 
			targetSeason.fullySpecifiedSeasonStartDate.isBefore($tseason.getFullySpecifiedSeasonStartDate()))
	then
		String _RULENAME = kcontext.rule.name;
		TargetDose lastFromPrev = $tsprev.getTargetDoses().last();
		$ts.evaluateVaccineGroupMinimumIntervalAndRecordReason($td, lastFromPrev);
		if ($td.containsInvalidReason(SupportedEvaluationConcept._BELOW_MINIMUM_INTERVAL_EVALUATION_REASON.getConceptCodeValue())) {
			ICEFactTypeFinding hef = new ICEFactTypeFinding(SupportedFactConcept._BELOW_MINIMUM_INTERVAL.getConceptCodeValue(), $td);
			insert(hef)				
		}
		$td.addDoseRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in " + $ts + "; Prior Dose " + lastFromPrev + " in " + $tsprev);
end


///////// ***
// Series table rule... Do not Edit
///////// ***
rule "HistoryEvaluation: Evaluate Shot as Invalid if it is not between the Season Start and End Dates" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	activation-group "doseInSeasonCheck"
	salience 100
	when
		$td : TargetDose(status == DoseStatus.EVALUATION_IN_PROCESS, $administrationDate : administrationDate)
		$ts : TargetSeries(containsTargetDose($td), targetSeason != null, targetSeason.dateIsApplicableToSeason($administrationDate, false) == false)
	then
		String _RULENAME = kcontext.rule.name;
		$td.addInvalidReason(SupportedEvaluationConcept._OUTSIDE_SEASON_REASON.getConceptCodeValue());
		$td.addDoseRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td.toString() + " in TargetSeries " + $ts);				
end


///////// ***
// Supplemental Series Table rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If all shots in the TargetSeries have been evaluated and the patient has reached immunity for every disease handled by this Series, mark in the TargetSeries that
// the patient is immune to all diseases.
///////// ***
rule "HistoryEvaluation: Set Immunity Flag in Series to True if Immune to All Diseases Tracked by this Series as of the Evaluation Time" ruleflow-group "HistoryEvaluation"
	dialect "mvel"
	when
		$ts : TargetSeries($diseasesSupportedByThisSeries : diseasesSupportedByThisSeries, isImmunityToAllDiseasesRecorded() == false)
		not TargetDose(hasBeenEvaluated == false) from $ts.targetDoses
		$diseaseImmunityList : List(size == $diseasesSupportedByThisSeries.size()) from 
			accumulate($di : DiseaseImmunity($d : disease, dateOfImmunity <= evalTime, $r : immunityReason, disease memberOf $diseasesSupportedByThisSeries), collectList($di))
	then
		String _RULENAME = kcontext.rule.name;
		modify($ts) {
			setImmunityToAllDiseasesRecorded(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries immunityToAllDiseasesRecorded set to true for " + $ts); 
end


/*****************************************************************************************************************************************************************************/
// 																Series Selection 
/*****************************************************************************************************************************************************************************/

///////// ***
// General Design rule... Do not Edit
///////// ***
rule "SeriesSelection: Insert TargetSeriesSelection (Tracker) on to the Fact List for each Vaccine Group/Season" ruleflow-group "SeriesSelection"
	dialect "java"
	salience 10
	when
		$tseries : TargetSeries($vg : getVaccineGroup(), $tseason : getTargetSeason())
		not (TargetSeriesSelection(getSeriesSelectionVaccineGroup() == $vg, getSeriesSelectionSeason() == $tseason))
	then
		String _RULENAME = drools.getRule().getName();
		TargetSeriesSelection tss = new TargetSeriesSelection($vg, $tseason);
		insert(tss);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeriesSelection added to fact list: " + tss.toString());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "SeriesSelection: Initialize Next Non-Seasonal TargetSeriesSelection" ruleflow-group "SeriesSelection"
	dialect "mvel"
	when
		$tss : TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_NOT_STARTED, $priority : seriesSelectionVaccineGroup.seriesSelectionPriority, 
			$vg : seriesSelectionVaccineGroup, seriesSelectionSeason == null)
		// Perform selection on series; higher priority vaccine groups first and those with seasons in start date ascending order
		not TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_NOT_STARTED, seriesSelectionVaccineGroup != $vg, seriesSelectionVaccineGroup.seriesSelectionPriority > $priority)
	then
		modify ($tss) {
			setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS);
		}
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeriesSelection Initialized " + $tss.toString() + ", Vaccine Group Priority " + $tss.seriesSelectionVaccineGroup.seriesSelectionPriority);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "SeriesSelection: Initialize Next Seasonal TargetSeriesSelection" ruleflow-group "SeriesSelection"
	dialect "mvel"
	when
		$tss : TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_NOT_STARTED, $priority : seriesSelectionVaccineGroup.seriesSelectionPriority, 
			$vg : seriesSelectionVaccineGroup, seriesSelectionSeason != null, $season : seriesSelectionSeason)
		// Perform selection on series; higher priority vaccine groups first and those with seasons in start date ascending order
		not TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_NOT_STARTED, seriesSelectionVaccineGroup != $vg, seriesSelectionVaccineGroup.seriesSelectionPriority > $priority) 		
		not TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_NOT_STARTED, seriesSelectionVaccineGroup == $vg, 
			seriesSelectionSeason != null && seriesSelectionSeason.fullySpecifiedSeasonStartDate.isBefore($season.fullySpecifiedSeasonStartDate))
	then
		modify ($tss) { 
			setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS);
		}
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeriesSelection Initialized " + $tss.toString() + ", Vaccine Group Priority " + $tss.seriesSelectionVaccineGroup.seriesSelectionPriority);
end


///////// ***
// General Design rule... Do not Edit 
// Updates series selection status for vaccine group to complete once series has been selected. 
///////// ***
rule "SeriesSelection: Change Series Selection Status To Complete" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 40
	when
		$tss : TargetSeriesSelection($ssvg : seriesSelectionVaccineGroup, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS,
			$sss : seriesSelectionSeason)
		TargetSeries(seriesRules.vaccineGroup == $ssvg, selectedSeries == true, targetSeason == $sss)
		not (TargetSeries(seriesRules.vaccineGroup == $ssvg, selectedSeries == false, targetSeason == $sss))
	then
		String _RULENAME = kcontext.rule.name;
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeriesSelection: " + $tss.toString() + "; *Series* *Selected* " + $tss.getSelectedSeriesName());
end


///////// ***
// General Design rule... Do not Edit 
// Retracts all TargetSeries and corresponding TargetDoses in a vaccine group that remain (i.e. - were not chosen). 
// For Seasonal Series, since recommendations are only made on the current season
///////// ***
rule "SeriesSelection: Retract All Series Not Selected in Vaccine Group" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 50
	when
		$tss : TargetSeriesSelection($ssvg : seriesSelectionVaccineGroup, $sss : seriesSelectionSeason, 
			seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS || seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_COMPLETE)
		$selected : TargetSeries(seriesRules.vaccineGroup == $ssvg, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == $ssvg, selectedSeries == false, targetSeason == $sss)
	then
		String _RULENAME = kcontext.rule.name;
		for (TargetDose d : $ts.targetDoses) {
			ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetDose Retracted: " + d);
			retract(d);
		}
		retract($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries Retracted: " + $ts);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "SeriesSelection: For the Seasonal Series being evaluated for SeriesSelection that is not in the current season, set patient age time of interest to last date of season if no shots administered" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 2000
	activation-group "patientAgeTimeOfInterestForSeasonSeriesSelection"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, $sss : seriesSelectionSeason, 
			$tssvg : seriesSelectionVaccineGroup)
		not TargetSeries(seriesRules.vaccineGroup == $tssvg, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(vaccineGroup == $tssvg, selectedSeries == false,	targetSeason == $sss, numberOfShotsAdministeredInSeries == 0)
		exists TargetSeries(vaccineGroup == $tssvg, targetSeason != null, targetSeason.fullySpecifiedSeasonStartDate.isAfter($ts.targetSeason.fullySpecifiedSeasonStartDate))
	then
		String _RULENAME = kcontext.rule.name;
		kcontext.getKnowledgeRuntime().setGlobal("patientAgeTimeOfInterest", $ts.targetSeason.fullySpecifiedSeasonEndDate.toDate());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: patientAgeTimeOfInterest set to season end date: " + patientAgeTimeOfInterest);
		update($tss);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "SeriesSelection: For the Seasonal Series being evaluated for SeriesSelection that is not in the current season, set patient age time of interest to last shot of the series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 2000
	activation-group "patientAgeTimeOfInterestForSeasonSeriesSelection"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, $sss : seriesSelectionSeason, 
			$tssvg : seriesSelectionVaccineGroup)
		not TargetSeries(seriesRules.vaccineGroup == $tssvg, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(vaccineGroup == $tssvg, selectedSeries == false,	targetSeason == $sss, numberOfShotsAdministeredInSeries > 0)
		exists TargetSeries(vaccineGroup == $tssvg, targetSeason != null, targetSeason.fullySpecifiedSeasonStartDate.isAfter($ts.targetSeason.fullySpecifiedSeasonStartDate))
	then
		String _RULENAME = kcontext.rule.name;	
		kcontext.getKnowledgeRuntime().setGlobal("patientAgeTimeOfInterest", $ts.lastShotAdministeredInSeries.administrationDate);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: patientAgeTimeOfInterest set to last shot date in series: " + patientAgeTimeOfInterest);
		update($tss);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "SeriesSelection: For the Seasonal Series being evaluated for SeriesSelection that is in the current season, set patient age time of interest to the execution time" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 2500
	activation-group "patientAgeTimeOfInterestForSeasonSeriesSelection"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, $sss : seriesSelectionSeason, 
			$tssvg : seriesSelectionVaccineGroup)
		not TargetSeries(seriesRules.vaccineGroup == $tssvg, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(vaccineGroup == $tssvg, selectedSeries == false, targetSeason == $sss)
		not TargetSeries(vaccineGroup == $tssvg, targetSeason != null, targetSeason.fullySpecifiedSeasonStartDate.isAfter($ts.targetSeason.fullySpecifiedSeasonStartDate))
	then
		String _RULENAME = kcontext.rule.name;
		kcontext.getKnowledgeRuntime().setGlobal("patientAgeTimeOfInterest", evalTime);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: patientAgeTimeOfInterest set to execution time: " + patientAgeTimeOfInterest +"; evalTime is " + evalTime);
		update($tss);
end


///////////////////////////////////////////////////////////// Series Selection Catch-All Rules Start Here /////////////////////////////////////////////////////////////


///////// ***
// Supplemental Series Selection rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// For all vaccine groups, if a series has not been selected by one of the custom rules and there are one or more series that have been completed, 
// select the series with the fewest doses necessary required to complete the series. 
///////// ***
rule "SeriesSelection: Select already completed series that has the fewest doses defined if exists and no other series selected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 60
	when
		$tss : TargetSeriesSelection($ssvg : seriesSelectionVaccineGroup, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		not (TargetSeries(selectedSeries == true, seriesRules.vaccineGroup == $ssvg, targetSeason == $sss))
		$ts1 : TargetSeries(seriesRules.vaccineGroup == $ssvg, isSeriesComplete() == true, $id1 : targetSeriesIdentifier, 
			$numberOfDosesInSeries1 : seriesRules.numberOfDosesInSeries, targetSeason == $sss)
		not (TargetSeries(seriesRules.vaccineGroup == $ssvg, isSeriesComplete() == true, $numberOfDosesInSeries1 > seriesRules.numberOfDosesInSeries, targetSeason == $sss))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts1);
		$ts1.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts1.seriesName);
		update($ts1);	
end


///////// ***
// Supplemental Series Selection rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If more than one series is complete but one of them has already been selected which completed after one of the other series, change the series
// selected to the one that was completed the soonest.
///////// ***
rule "SeriesSelection: Select already completed series with earliest completion date if exists and different completed series was previously selected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 60
	activation-group "SeriesSelectionFewestDoses"
	when
		$tss : TargetSeriesSelection($ssvg : seriesSelectionVaccineGroup, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		$ts1 : TargetSeries(seriesRules.vaccineGroup == $ssvg, $id1 : targetSeriesIdentifier, selectedSeries == true, targetSeason == $sss, 
			$seriesComplete1 : isSeriesComplete(), $lastNecessaryShotAdministered1 : getValidOrAcceptedShotByDoseNumber(seriesRules.numberOfDosesInSeries) != null, 
			$lastNecessaryShotAdministered1Date : getValidOrAcceptedShotByDoseNumber(seriesRules.numberOfDosesInSeries).getAdministrationDate() != null)
		$ts2 : TargetSeries(seriesRules.vaccineGroup == $ssvg, $id2 : targetSeriesIdentifier, $id2 != $id1, selectedSeries == false, targetSeason == $sss, 
			$seriesComplete2 : isSeriesComplete(), $lastAdministeredShot2InSeries: lastShotAdministeredInSeries, 
			$lastNecessaryShotAdministered2 : getValidOrAcceptedShotByDoseNumber(seriesRules.numberOfDosesInSeries))
		eval($seriesComplete1 == true && $seriesComplete2 == true && ($lastAdministeredShot2InSeries == null || 
				($lastNecessaryShotAdministered2.getAdministrationDate() != null && $lastNecessaryShotAdministered2.getAdministrationDate().before($lastNecessaryShotAdministered1Date))))
	then
		String _RULENAME = kcontext.rule.name;
		$ts1.setSelectedSeries(false);
		$ts2.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2.seriesName);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Previously Selected TargetSeries Retracted for Already Complete Series: " + $ts2);
		update($ts1);
		update($ts2);	
end


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                            Custom Series Selection Custom Start Here - TODO: Move to DSLRs                                                 //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////// Influenza-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection: DUMMY catch-all Influenza season rule, 2 dose-series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 2-Dose Series", selectedSeries == false, 
			targetSeason == $sss)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// If there is only one Influenza series for the season, just select it for forecasting. This could happen, for example, if no season was defined
// and the default season parameters are used
rule "SeriesSelection: Select Only Influenza Series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, targetSeason == $sss, $tsid : targetSeriesIdentifier)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, targetSeason == $sss, targetSeriesIdentifier != $tsid)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// If the patient is < 9 years of age and none of the 1-dose influenza series conditions are not met (via other rules), then 2-dose series applies
rule "SeriesSelection: For the Influenza 2015-2016, 2014-2015, 2013-2014 or 2012-2013 season if the patient < 9yrs and all 2-dose series conditions met, then 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, seriesSelectionSeason.seasonName == "2015-2016 Influenza Season" || seriesSelectionSeason.seasonName == "2014-2015 Influenza Season" || 
				seriesSelectionSeason.seasonName == "2013-2014 Influenza Season" || seriesSelectionSeason.seasonName == "2012-2013 Influenza Season", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason != null && targetSeason == $sss)
		// Get the "current" season for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 2-Dose Series", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)			
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);			
end


// For the Influenza 2014-2015 season, if the patient is >= 6months and < 9 years of age, then the 1-dose series applies if the following condition is met:
//     c) The patient received at least 1 dose of seasonal influenza vaccine during the 8/1/2013-6/30/2014 influenza vaccine season
rule "SeriesSelection: For the Influenza 2014-2015 season if the patient < 9yrs and 3rd 1-dose series condition met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, seriesSelectionSeason.seasonName == "2014-2015 Influenza Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason != null && targetSeason == $sss)
		// Determine and make note of the "current" season for series selection
		$season : Season(seasonName == "2014-2015 Influenza Season", isDefinedBySeriesTableRules() == true, $seasonDefStart : fullySpecifiedSeasonStartDate, $seasonDefEnd : fullySpecifiedSeasonEndDate)
		// Pick the TargetSeries that is actually in the 2014-2015 season, not just using the 2014-2015 season rules (which would be after 2014-2015 defined dates)	
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 1-Dose Series", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $seasonEndDate : targetSeason.fullySpecifiedSeasonEndDate, 
			$seasonStartDate.compareTo($seasonDefStart) == 0 && $seasonEndDate.compareTo($seasonDefEnd) == 0, $tsid : targetSeriesIdentifier)
		// Determine and make note of the prior "2013-2014" season; if 1 or more valid doses during 2013-2014, 1-dose series applies
		$ts2013 : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason.seasonName == "2013-2014 Influenza Season")
		accumulate($tsthis : TargetDose(isValid == true) from $ts2013.targetDoses; $countValid : count($tsthis); $countValid >= 1)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);				
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);	
end


// For the Influenza 2013-2014 season, if the patient is >= 6months and < 9 years of age then the 1-dose series applies if the following condition is met:
//     b) The patient received at least 2 doses of seasonal influenza vaccine prior to July 2010 and at least one dose of monovalent 2009 H1N1 vaccine
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014 or 2014-2015 season if the patient < 9yrs and 2nd 1-dose series condition met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "2014-2015 Influenza Season" || seriesSelectionSeason.seasonName == "2013-2014 Influenza Season" || seriesSelectionSeason.seasonName == "2012-2013 Influenza Season", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason != null && targetSeason == $sss)
		// Determine and make note of the "current" season for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 1-Dose Series", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)

		$currentAndPriorSeasonsInfluenzaSeasons : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, 
			 targetSeason != null && targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate) || targetSeriesIdentifier == $tsid), collectList($tsInfluenzaThis))
		$allh1n12009Seasons : List() from accumulate($thisH1N1Series : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1,
			targetSeason != null && targetSeason.seasonName == "2009 H1N1 Season", selectedSeries == true), collectList($thisH1N1Series))
		accumulate($tdpriorCondition2 : TargetDose(isValid == true, administrationDate < "01-Jul-2010") from getAllDosesAcrossListOfTargetSeries($currentAndPriorSeasonsInfluenzaSeasons);
			$countPriorInfluenzaDosesCondition2 : count($tdpriorCondition2); $countPriorInfluenzaDosesCondition2 >= 2)
		accumulate($tdpriorH1N1Condition2 : TargetDose(isValid == true) from getAllDosesAcrossListOfTargetSeries($allh1n12009Seasons);
			$countPriorH1N1DosesCondition2 : count($tdpriorH1N1Condition2);	$countPriorH1N1DosesCondition2 >= 1)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);				
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// For the Influenza 2013-2014 season, if the patient is < 9 years of age then the 1-dose series applies if the following condition is met:
//    a) The patient received at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014 or 2014-2015 season if the patient < 9yrs and 1st 1-dose series condition met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "2014-2015 Influenza Season" || seriesSelectionSeason.seasonName == "2013-2014 Influenza Season" || seriesSelectionSeason.seasonName == "2012-2013 Influenza Season", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)
		// Determine which season we're looking at now for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 1-Dose Series", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//	The patient received at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
		$priorSeasonsInfluenzaSeasons : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, 
			targetSeason != null && targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdprior: TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenzaSeasons);
			$latestInfluenzaDoseDateFromPriorSeasons : maxDate($shotDateCondition1), $countPriorDoses : count($tdprior); 
			$latestInfluenzaDoseDateFromPriorSeasons != null, LocalDate.fromDateFields((Date) $latestInfluenzaDoseDateFromPriorSeasons).compareTo(new LocalDate(2010, 7, 1)) >= 0 && 
				$countPriorDoses >=2)
		// The patient is < 9 years of age
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// For the Influenza 2015-2016 season, if the patient is < 9 years of age then the 1-dose series applies if the following condition is met:
// The child received at least 2 doses of seasonal influenza vaccine during any prior influenza seasons.
rule "SeriesSelection: For the Influenza 2015-2016 season if the patient < 9yrs and at least 2 doses of seasonal influenza vaccine during any prior influenza seasons, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, seriesSelectionSeason.seasonName == "2015-2016 Influenza Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)
		// Determine which season we're looking at now for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 1-Dose Series", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//	The patient received at least 2 doses of seasonal influenza vaccine during prior influenza seasons
		$priorSeasonsInfluenzaSeasons : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, 
			targetSeason != null && targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdprior: TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenzaSeasons);
			$countPriorDoses : count($tdprior);	$countPriorDoses >=2)
		// The patient is < 9 years of age
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// If the patient is >= 9 and < 10 years of age and 2-dose influenza series conditions are not met (see next rule), then 1-dose series applies
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014, 2014-2015 or 2015-2016 season if patient >= 9yrs and < 10yrs and 1-dose series conditions are met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	activation-group "InfluenzaSeries9to10yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, seriesSelectionSeason.seasonName == "2015-2016 Influenza Season" || seriesSelectionSeason.seasonName == "2014-2015 Influenza Season" || 
				seriesSelectionSeason.seasonName == "2013-2014 Influenza Season" || seriesSelectionSeason.seasonName == "2012-2013 Influenza Season", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 1-Dose Series", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") >= 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)						
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);				
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);	
end


// For the Influenza 2015-2016, if the patient is >= 9 and < 10 years of age then the 2-dose influenza series applies if all of the following three conditions are met:
//	* The patient received a dose of influenza at < 9 years of age during the current influenza vaccine season 
// 	* The patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
// 	* The patient DID NOT receive at least 2 doses of seasonal influenza vaccine prior to July 2010 and at least one dose of monovalent 2009 H1N1 vaccine
// Otherwise, the 1-dose series applies
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014 or 2014-2015 season if patient >= 9yrs and < 10yrs and all 2-dose series conditions met, then 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	activation-group "InfluenzaSeries9to10yrSelectionCheck"	
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "2014-2015 Influenza Season" || seriesSelectionSeason.seasonName == "2013-2014 Influenza Season" || seriesSelectionSeason.seasonName == "2012-2013 Influenza Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)
		// Determine and make note of the 2-Dose TargetSeries for this season
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 2-Dose Series", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//
		// Condition: the patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
		///
		$priorSeasonsInfluenza : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, 
			targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdpriorCondition1 : TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenza); 
			$latestInfluenzaDoseDateFromPriorSeasons : maxDate($shotDateCondition1), $countPriorInfluenzaDosesCondition1 : count($tdpriorCondition1); 
			$latestInfluenzaDoseDateFromPriorSeasons == null || (! ($countPriorInfluenzaDosesCondition1 >= 2 &&  
				LocalDate.fromDateFields((Date) $latestInfluenzaDoseDateFromPriorSeasons).compareTo(new LocalDate(2010, 7, 1)) >= 0)))
		//
		// Condition: the patient DID NOT receive at least 2 doses of seasonal influenza vaccine prior to July 2010 (i.e. - across current season and prior season) and at least one
		// dose of monovalent 2009 H1N1 vaccine
		// 			
		$currentAndPriorSeasonsInfluenza : List() from accumulate($tsInfluenzaThis2 : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, 
			targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate) || targetSeriesIdentifier == $tsid), collectList($tsInfluenzaThis2))
		$allh1n12009Season : List() from accumulate($thisH1N1Series : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1,
		 	// (selected series is redundant since H1N1 VG has should have done through select series first, but this is a safeguard)
			targetSeason != null && targetSeason.seasonName == "2009 H1N1 Season", selectedSeries == true), collectList($thisH1N1Series))	
		$countPriorH1N1Doses : Number() from accumulate($td2009h1n1shot: TargetDose(isValid == true) from getAllDosesAcrossListOfTargetSeries($allh1n12009Season), count($td2009h1n1shot))
 		accumulate($tdpriorCondition2 : TargetDose(isValid == true, administrationDate < "01-Jul-2010") from getAllDosesAcrossListOfTargetSeries($currentAndPriorSeasonsInfluenza); 
			$countPriorInfluenzaDosesCondition2 : count($tdpriorCondition2); (! ($countPriorInfluenzaDosesCondition2 >= 2 && $countPriorH1N1Doses >= 1)) == true)
		//
		// The patient is >= 9 and < 10 years of age and received a valid dose < 9 years of age *during the current influeza season*
		//
		$earliestInfluenzaDoseDateThisSeason : Date() from accumulate($tdcurr : TargetDose(isValid == true, $doseDatesThisSeason : administrationDate) from $ts.targetDoses, 
			minDate($doseDatesThisSeason))
		$person : EvaluatedPerson()
		eval($earliestInfluenzaDoseDateThisSeason != null && TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $earliestInfluenzaDoseDateThisSeason, "9y") < 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") >= 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "patient age of interest " + patientAgeTimeOfInterest + "; SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


// For the Influenza 2015-2016 season, if the patient is >= 9 and < 10 years of age then the 2-dose influenza series applies if all of the following three conditions are met:
//	* The patient received a dose of influenza at < 9 years of age during the current influenza vaccine season 
// 	* The patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons
// Otherwise, the 1-dose series applies
rule "SeriesSelection: For the Influenza 2015-2016 season if patient >= 9yrs and < 10yrs and all 2-dose series conditions met, then 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	activation-group "InfluenzaSeries9to10yrSelectionCheck"	
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, seriesSelectionSeason.seasonName == "2015-2016 Influenza Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)
		// Determine and make note of the 2-Dose TargetSeries for this season
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 2-Dose Series", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//
		// Condition: the patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons
		///
		$priorSeasonsInfluenza : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, 
			targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdpriorCondition1 : TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenza); 
			$countPriorInfluenzaDosesCondition1 : count($tdpriorCondition1); (! ($countPriorInfluenzaDosesCondition1 >= 2)))
		//
		// The patient is >= 9 and < 10 years of age and received a valid dose < 9 years of age *during the current influeza season*
		//
		$earliestInfluenzaDoseDateThisSeason : Date() from accumulate($tdcurr : TargetDose(isValid == true, $doseDatesThisSeason : administrationDate) from $ts.targetDoses, 
			minDate($doseDatesThisSeason))
		$person : EvaluatedPerson()
		eval($earliestInfluenzaDoseDateThisSeason != null && TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $earliestInfluenzaDoseDateThisSeason, "9y") < 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") >= 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "patient age of interest " + patientAgeTimeOfInterest + "; SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end



// If the patient is >= 10 years of age then the 1-dose influenza series applies 
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014, 2014-2015 and 2015-2016 seasons and patient >= 10yrs, 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, seriesSelectionSeason.seasonName == "2015-2016 Influenza Season" || seriesSelectionSeason.seasonName == "2013-2014 Influenza Season" || 
				seriesSelectionSeason.seasonName == "2012-2013 Influenza Season" || seriesSelectionSeason.seasonName == "2014-2015 Influenza Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Influenza, seriesRules.seriesName == "Influenza 1-Dose Series", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") >= 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "patient age of interest " + patientAgeTimeOfInterest + "; SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// H1N1-Specific Series Selection Rules Start Here ////////////////////////////////////////////////////////////

// If there is only one Influenza series for the season, just select it for forecasting. This could happen, for example, if no season was defined
// and the default season parameters are used
rule "SeriesSelection: Select Only H1N1 Series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.H1N1, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, selectedSeries == true, targetSeason == $sss)		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, targetSeason == $sss, $tsid : targetSeriesIdentifier)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, targetSeason == $sss, targetSeriesIdentifier != $tsid)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);			
end


// If the patient is <10 years of age then the 1-dose h1n1 series applies 
rule "SeriesSelection: For the H1N1 2009 season, patient < 10yrs, 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.H1N1, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null && seriesSelectionSeason.seasonName == "2009 H1N1 Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, seriesRules.seriesName == "H1N1 2-Dose Series", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


// If the patient is >= 10 years of age then the 1-dose h1n1 series applies 
rule "SeriesSelection: For the H1N1 2009 season, patient >= 10yrs and number of effective doses <= 1 at last shot date, 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.H1N1, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null && seriesSelectionSeason.seasonName == "2009 H1N1 Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, seriesRules.seriesName == "H1N1 1-Dose Series", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") >= 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


// If the patient is <10 years of age then the 1-dose h1n1 series applies 
rule "SeriesSelection: For the H1N1 2009 season, if effective number of doses >=2 on the date of the last shot, the 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.H1N1, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null && seriesSelectionSeason.seasonName == "2009 H1N1 Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, selectedSeries == true, targetSeason == $sss)
		$td : TargetDose(doseNumberInSeries == 2, isValid == true, $administrationDate : administrationDate)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.H1N1, seriesRules.seriesName == "H1N1 2-Dose Series", selectedSeries == false,
			targetSeason == $sss, containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $administrationDate, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// HPV-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one HPV series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyHPVSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HPVSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HPV, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HPV, selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HPV, $tsid : targetSeriesIdentifier)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// Polio-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection.SelectOnlyPolioSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "PolioSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Polio, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Polio, selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Polio, $tsid : targetSeriesIdentifier)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// Meningococcal-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection.SelectOnlyMCVSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "MCVSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Meningococcal, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Meningococcal, selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Meningococcal, $tsid : targetSeriesIdentifier)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end

///////////////////////////////////////////////////////////// PPSV-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one PPSV series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyPPSVSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "PPSVSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.PPSV, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.PPSV, selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.PPSV)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// PCV-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one PCV series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyPCVSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "PCVSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.PCV, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.PCV, selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.PCV)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// Hib-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection.SelectByDefaultHib4DoseSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HibSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Hib, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, selectedSeries == true)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, seriesRules.seriesName == "Hib 4-Dose Series",	selectedSeries == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


rule "SeriesSelection.SelectHibOMPSeriesIfFirstDoseHibOMPBefore7MonthsAndOnlyOneValidDoseTotal" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 200
	activation-group "HibSeriesSelectionCheck"
	when
	//Hib OMP Series
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Hib, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, selectedSeries == true)
		$td : TargetDose(doseNumberInSeries == 1, isValid == true, $administrationDate : administrationDate, 
			vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HIB_PRP_OMP.conceptCodeValue, $td1UniqueId : uniqueId)
		$ts: TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, $sn : seriesRules.seriesName == "Hib OMP Series", selectedSeries == false, 
			containsTargetDose($td), $effectiveDoses : determineEffectiveNumberOfDosesInSeries, numberOfShotsAdministeredInSeries == 1)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, seriesRules.seriesName != $sn, 
			getValidOrAcceptedShotByDoseNumber(1) != null && getValidOrAcceptedShotByDoseNumber(1).getAdministrationDate() < $administrationDate)			
		$person : EvaluatedPerson($birthDate : demographics.birthTime)
		eval($effectiveDoses == 1 && TimePeriod.calculateElapsedTimePeriod($birthDate, $administrationDate, DurationType.MONTHS).isLessThan(new TimePeriod(7, DurationType.MONTHS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts.getSeriesName());
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.getSeriesName());
		update($ts);	
end


rule "SeriesSelection.SelectHibOMPSeriesIfTwoDosesHibOMPOneBefore7MonthsOtherBefore12Months" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 300
	activation-group "HibSeriesSelectionCheck"
	when
	//Hib OMP Series
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Hib, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, selectedSeries == true)
		$td1 : TargetDose(doseNumberInSeries == 1, isValid == true, $administrationDate1 : administrationDate, 
			vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HIB_PRP_OMP.conceptCodeValue)
		$td2 : TargetDose(doseNumberInSeries == 2, isValid == true, $administrationDate2 : administrationDate, 
			vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HIB_PRP_OMP.conceptCodeValue, $td2UniqueId : uniqueId)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, $sn : seriesRules.seriesName == "Hib OMP Series", 
			selectedSeries == false, containsTargetDose($td1), containsTargetDose($td2))
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Hib, seriesRules.seriesName != $sn, 
			getValidOrAcceptedShotByDoseNumber(2) != null && getValidOrAcceptedShotByDoseNumber(2).getAdministrationDate() < $administrationDate2)
		$person : EvaluatedPerson($birthDate : demographics.birthTime)
		eval(TimePeriod.calculateElapsedTimePeriod($birthDate, $administrationDate1, DurationType.MONTHS).isLessThan(new TimePeriod(7, DurationType.MONTHS)) && 
			TimePeriod.calculateElapsedTimePeriod($birthDate, $administrationDate2, DurationType.MONTHS).isLessThan(new TimePeriod(12, DurationType.MONTHS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


///////////////////////////////////////////////////////////// Hep A-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Override general rule which picks the doses with the least number to complete the series
rule "SeriesSelection.HepADoNOTSelectAlreadyCompleteSeriesWithFewestDosesIfExistsAndOtherSeriesPreviouslySelected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "SeriesSelectionFewestDoses"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepA, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		$ts : TargetSeries(selectedSeries == true, seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA)
	then
		String _RULENAME = kcontext.rule.name;
		// Don't do anything - overriding general rule which picks least series
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


rule "SeriesSelection.SelectHepA2DoseSeriesIfNoShotGiven" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HepASeriesSelectionCheck"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepA, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, selectedSeries == true)
		not (TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, numberOfShotsAdministeredInSeries > 0))
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, seriesRules.seriesName == "HepA 2-Dose Child/Adult Series", 
			selectedSeries == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


rule "SeriesSelection.SelectHepA2DoseSeriesForLessThan19YearsAndCertainVaccines" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HepASeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepA, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, selectedSeries == true)
		$td : TargetDose(vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_PEDADOL_2_DOSE.conceptCodeValue || 
			  vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_PEDADOL_3_DOSE.conceptCodeValue || 
			  vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_PED_NOS.conceptCodeValue)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, seriesRules.seriesName == "HepA 2-Dose Child/Adult Series", 
			selectedSeries == false, containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $td.getAdministrationDate(), DurationType.YEARS).isLessThan(new TimePeriod(19, DurationType.YEARS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


rule "SeriesSelection.SelectHepA2DoseSeriesForCertainVaccines" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HepASeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepA, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, selectedSeries == true)
		$td : TargetDose(vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_ADULT.conceptCodeValue || 
			  vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_NOS.conceptCodeValue)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, seriesRules.seriesName == "HepA 2-Dose Child/Adult Series", 
			selectedSeries == false, containsTargetDose($td))	
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.getSeriesName());
		update($ts);		
end


rule "SeriesSelection.SelectHepA3DoseSeriesFor19YearsAndOverAndCertainVaccines" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 200
	activation-group "HepASeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepA, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, selectedSeries == true)
		$td : TargetDose(vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_PEDADOL_2_DOSE.conceptCodeValue || 
			  vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_PEDADOL_3_DOSE.conceptCodeValue || 
			  vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._HEPA_PED_NOS.conceptCodeValue)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepA, seriesRules.seriesName == "HepA Adult 3-Dose Series", 
			selectedSeries == false, containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $td.getAdministrationDate(), DurationType.YEARS).isGreaterThanEqualTo(new TimePeriod(19, DurationType.YEARS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


///////////////////////////////////////////////////////////// Hep B-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection.SelectHepBNewbornSeriesAtLeastOneShot" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HepBSeriesSelectionCheck"
	when	
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepB, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, selectedSeries == true))
		$person : EvaluatedPerson()
		$td : TargetDose(administeredShotNumberInSeries == 1)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, seriesRules.seriesName == "HepB Newborn Series", 
			selectedSeries == false, containsTargetDose($td))
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $td.administrationDate, DurationType.DAYS).isLessThan(new TimePeriod(28, DurationType.DAYS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


rule "SeriesSelection.SelectHepBNewBornSeriesNoShot" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HepBSeriesSelectionCheck"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepB, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, selectedSeries == true))	
		$person : EvaluatedPerson()
		$evalTime: EvalTime()
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, seriesRules.seriesName == "HepB Newborn Series", 
			selectedSeries == false, targetDoses.empty)
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $evalTime.evalTimeValue,	DurationType.DAYS).isLessThan(new TimePeriod(28, DurationType.DAYS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


rule "SeriesSelection.SelectHepBChildAdultSeriesAtLeastOneShot" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HepBSeriesSelectionCheck"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepB, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, selectedSeries == true))
		$person : EvaluatedPerson()
		$td : TargetDose(administeredShotNumberInSeries == 1)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, seriesRules.seriesName == "HepB Child/Adult Series", 
			selectedSeries == false, containsTargetDose($td))
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $td.administrationDate, DurationType.DAYS).isGreaterThanEqualTo(new TimePeriod(28, DurationType.DAYS)))	
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


rule "SeriesSelection.SelectHepBChildAdultSeriesNoShot" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "HepBSeriesSelectionCheck"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.HepB, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, selectedSeries == true))	
		$person : EvaluatedPerson()
		$evalTime: EvalTime()
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.HepB, seriesRules.seriesName == "HepB Child/Adult Series", selectedSeries == false, targetDoses.empty)
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $evalTime.evalTimeValue, DurationType.DAYS).isGreaterThanEqualTo(new TimePeriod(28, DurationType.DAYS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


///////////////////////////////////////////////////////////// DTP-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

//
// If the patient is >= 7 years of age and has zero doses on record prior to age 7 years, then the 3-dose series applies; otherwise the 5-dose series applies.
//

rule "SeriesSelection.SelectDTP5DoseSeriesIf3DoseSeriesNotSelected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "DTPSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.DTP, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.DTP, selectedSeries == true))
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.DTP, seriesRules.seriesName == "DTP 5-Dose Series")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


rule "SeriesSelection.Select3DoseDTPSeriesIfNoShotsPriorTo7YrsAnd7YrsOldOrOlder" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	activation-group "DTPSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.DTP, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.DTP, selectedSeries == true))
		$person : EvaluatedPerson($birthDate : demographics.birthTime, $ageAt7yrs : TimePeriod.addTimePeriod(demographics.birthTime, "7y"))
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.DTP, seriesRules.seriesName == "DTP 3-Dose Series")
		not TargetDose(associatedTargetSeries == $ts, administrationDate < $ageAt7yrs)
		eval(TimePeriod.calculateElapsedTimePeriod($birthDate, evalTime, DurationType.YEARS).isGreaterThan(new TimePeriod(7, DurationType.YEARS), true))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// MMR-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one MMR series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyMMRSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "MMRSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.MMR, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.MMR, selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.MMR)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// Varicella-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one Varicella series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyVaricellaSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	activation-group "VaricellaSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Varicella, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Varicella, selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Varicella)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// Rotavirus-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// If no doses have been administered, then select the Rotavirus 3-dose series
rule "SeriesSelection.SelectRotavirus3DoseSeriesDefault" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 140
	activation-group "RotavirusSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Rotavirus, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Rotavirus, selectedSeries == true))	
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Rotavirus, seriesRules.seriesName == "Rotavirus 3-Dose Series")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end

// If CVX 116 (Rotavirus RV5 (RotaTeq, 3 dose)), CVX 74 (Rotavirus) or CVX 122 (Rotavirus NOS) is administered, then the 3 dose series applies.
rule "SeriesSelection.SelectRotavirus3DoseSeriesIfCertainVaccinesAdministered" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 200
	activation-group "RotavirusSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Rotavirus, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Rotavirus, selectedSeries == true))		
		$td : TargetDose(isValid == true, countsTowardsCompletionOfSeries == true, 
			(vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._ROTAVIRUS_RV5.conceptCodeValue || 
			  vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._ROTAVIRUS_NOS.conceptCodeValue || 
			  vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._ROTAVIRUS.conceptCodeValue))
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Rotavirus, seriesRules.seriesName == "Rotavirus 3-Dose Series", containsTargetDose($td))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


// If dose 1 is CVX 119 (Rotavirus RV1 (Rotarix, 2 dose)) then the 2 dose series applies
rule "SeriesSelection.SelectRotavirus2DoseSeriesIf1DoseRV1" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 150
	activation-group "RotavirusSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == SupportedVaccineGroupConcept.Rotavirus, seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Rotavirus, selectedSeries == true))	
		$td : TargetDose(isValid == true, doseNumberInSeries == 1, vaccineComponent.vaccineConcept.openCdsConceptCode == SupportedVaccineConcept._ROTAVIRUS_RV1.conceptCodeValue)
		$ts : TargetSeries(seriesRules.vaccineGroup == SupportedVaccineGroupConcept.Rotavirus, seriesRules.seriesName == "Rotavirus 2-Dose Series", containsTargetDose($td))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


/*****************************************************************************************************************************************************************************/
// 											Ruleflow group for forecasting "RecommendationForecast"
/*****************************************************************************************************************************************************************************/


///////// ***	
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.findMostRecentAdministeredLiveVirusVaccineDate" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 10
	when
		$lvd : LiveVirusFact(LiveVirusDateSet == false)
		exists (TargetSeries(recommendationStatus == RecommendationStatus.NOT_FORECASTED))
		exists (TargetDose(vaccineComponent.isLiveVirusVaccine == true))
		$maxdate : Date() from accumulate(TargetDose(vaccineComponent.isLiveVirusVaccine == true, $date : administrationDate), maxDate($date))
	then
		String _RULENAME = kcontext.rule.name;
		$lvd.setLiveVirusDate($maxdate);		
		$lvd.setLiveVirusDateSet(true);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Found most recent live virus vaccine administered on " + $lvd.getLiveVirusDate());
		update($lvd);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.setNextSeasonalTargetSeriesForRecommendation" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	when
		$ts: TargetSeries(recommendationStatus == RecommendationStatus.NOT_FORECASTED, $vg : vaccineGroup, isSelectedSeries() == true, targetSeason != null, 
			$tseasonStartDate : targetSeason.fullySpecifiedSeasonStartDate)
		not TargetSeries(vaccineGroup == $vg, targetSeason != null,	targetSeason.fullySpecifiedSeasonStartDate.isAfter($tseasonStartDate)) 
	then
		String _RULENAME = kcontext.rule.name;		
		RecommendationStatus newRecommendationStatus = RecommendationStatus.FORECASTING_IN_PROGRESS;
		$ts.setRecommendationStatus(newRecommendationStatus);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Forecasting TargetSeries " + $ts);
		setFocus("preRecommendationValidation");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.setNextNonSeasonalTargetSeriesForRecommendation" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	when
		$ts: TargetSeries(recommendationStatus == RecommendationStatus.NOT_FORECASTED, isSelectedSeries() == true, targetSeason == null)
	then
		String _RULENAME = kcontext.rule.name;		
		RecommendationStatus newRecommendationStatus = RecommendationStatus.FORECASTING_IN_PROGRESS;
		$ts.setRecommendationStatus(newRecommendationStatus);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Forecasting TargetSeries " + $ts);
		setFocus("preRecommendationValidation");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.applyPostRecommendationCheck" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 20
	no-loop true
	when
		$targetSeries : TargetSeries(isPostForecastCheckCompleted() == false && 
			(recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE ||
			recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED || recommendationStatus == RecommendationStatus.NOT_RECOMMENDED))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Post recommendation check for TargetSeries " + $targetSeries.getSeriesName());
		setFocus("postRecommendationCheck");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.noteCompletionOfPostRecommendationCheck - Do _not_ reprocess recommendation rules" ruleflow-group "RecommendationForecast"
dialect "mvel"
	salience 10
	when
		$targetSeries : TargetSeries(isPostForecastCheckCompleted() == false, 
			(recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE ||
				recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED || recommendationStatus == RecommendationStatus.NOT_RECOMMENDED))
then
	String _RULENAME = kcontext.rule.name;
	$targetSeries.setRecommendationStatus(RecommendationStatus.FORECASTING_COMPLETE);
	$targetSeries.setPostForecastCheckCompleted(true);
	update($targetSeries);
	ICELogicHelper.logDRLDebugMessage(_RULENAME, "Note Completion of Post recommendation check for TargetSeries " + $targetSeries.getSeriesName());
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.noteCompletionOfPostRecommendationCheck - _Do_ reprocess recommendation rules" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "postRecommendationCheck"
	when
		$targetSeries : TargetSeries(isPostForecastCheckCompleted() == false, recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS)
	then
		String _RULENAME = kcontext.rule.name;
		$targetSeries.clearRecommendations();
		$targetSeries.setPostForecastCheckCompleted(true);
		update($targetSeries);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Note Completion of Post recommendation check for TargetSeries " + $targetSeries.getSeriesName());
		setFocus("preRecommendationValidation");
end


///////// ***
// Supplemental Recommendation rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If a recommended, conditionally recommended, or future recommendation for a live virus vaccine and other live virus shots have been administered less than 28 days from 
// the recommendation date, then adjust the earliest recommendation date to be 28 days later than the most recent live virus shot
///////// ***
rule "RecommendationForecast.adjustEarliestRecommendedDateDueToLiveVirus" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "supplementalSeriesRule"
	when
		$lvd : LiveVirusFact($lvdDate : liveVirusDate, liveVirusDate != null, liveVirusDateSet == true)
		$targetSeries : TargetSeries($earliestDate : getFinalEarliestDate() != null, 
			(recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE || 
				recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED), 
			isRecommendedVaccineOrVaccineGroupLevelRecommendationAnExpectedLiveVirusVaccine() == true)  
		eval((TimePeriod.differenceInDays($lvdDate, evalTime) != 0 &&
			TimePeriod.calculateElapsedTimePeriod($lvdDate, $earliestDate, DurationType.DAYS, true).isLessThan(new TimePeriod(28, DurationType.DAYS))) ||
			(TimePeriod.differenceInDays($lvdDate, evalTime) == 0 &&
			(TimePeriod.calculateElapsedTimePeriod($lvdDate, $earliestDate, DurationType.DAYS, false).isLessThan(new TimePeriod(28, DurationType.DAYS)) &&
			TimePeriod.calculateElapsedTimePeriod($lvdDate, $earliestDate, DurationType.DAYS, false).isGreaterThan(new TimePeriod(0, DurationType.DAYS))) || 
			TimePeriod.calculateElapsedTimePeriod($lvdDate, $earliestDate, DurationType.DAYS, false).isLessThan(new TimePeriod(-28, DurationType.DAYS))))
	then
		String _RULENAME = kcontext.rule.name;
		Date $newRecommendationDate = TimePeriod.addTimePeriod($lvdDate, new TimePeriod(28, DurationType.DAYS));
		$targetSeries.setFinalEarliestDate($newRecommendationDate);
		$targetSeries.addSeriesRuleProcessed(_RULENAME);
      	ICELogicHelper.logDRLDebugMessage(_RULENAME, "Earliest date adjustment from " + $earliestDate + " to " + $newRecommendationDate + " due to live virus vaccine administered on : " + $lvd.getLiveVirusDate() + " in TargetSeries " + $targetSeries.getSeriesName());			
		update($targetSeries);
end 


///////// ***
// Supplemental Recommendation rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If a recommended, conditionally recommended, or future recommendation for a live virus vaccine and other live virus shots have been administered less than 28 days from 
// the recommendation date, then adjust the recommendation date to be 28 days later than the most recent live virus shot
///////// ***
rule "RecommendationForecast.adjustRecommendedDateDueToLiveVirus" ruleflow-group "RecommendationForecast"
	dialect "java"
	agenda-group "supplementalSeriesRule"
	when
		$lvd : LiveVirusFact($lvdDate : liveVirusDate, liveVirusDate != null, liveVirusDateSet == true)
		$targetSeries : TargetSeries($recommendationDueDate : getFinalRecommendationDate() != null,
			(recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE || 
				recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED), isRecommendedVaccineOrVaccineGroupLevelRecommendationAnExpectedLiveVirusVaccine() == true)  
		eval((TimePeriod.differenceInDays($lvdDate, evalTime) != 0 &&
			TimePeriod.calculateElapsedTimePeriod($lvdDate, $recommendationDueDate, DurationType.DAYS, true).isLessThan(new TimePeriod(28, DurationType.DAYS))) ||
			(TimePeriod.differenceInDays($lvdDate, evalTime) == 0 &&
			(TimePeriod.calculateElapsedTimePeriod($lvdDate, $recommendationDueDate, DurationType.DAYS, false).isLessThan(new TimePeriod(28, DurationType.DAYS)) &&
			TimePeriod.calculateElapsedTimePeriod($lvdDate, $recommendationDueDate, DurationType.DAYS, false).isGreaterThan(new TimePeriod(0, DurationType.DAYS))) || 
			TimePeriod.calculateElapsedTimePeriod($lvdDate, $recommendationDueDate, DurationType.DAYS, false).isLessThan(new TimePeriod(-28, DurationType.DAYS))))
	then
		String _RULENAME = drools.getRule().getName();
		Date $newRecommendationDate = TimePeriod.addTimePeriod($lvdDate, new TimePeriod(28, DurationType.DAYS));
		$targetSeries.setFinalRecommendationDate($newRecommendationDate);
		$targetSeries.addSeriesRuleProcessed(_RULENAME);
      	ICELogicHelper.logDRLDebugMessage(_RULENAME, "Recommendation date adjustment from " + $recommendationDueDate + " to " + $newRecommendationDate + " due to live virus vaccine administered on : " + $lvd.getLiveVirusDate() + " in TargetSeries " + $targetSeries.getSeriesName());			
		update($targetSeries);	
end 


rule "RecommendationForecast.adjustRecommendedStatusForFinalRecommendationDateWithRespectToEvalTime" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "supplementalSeriesRule"
	when
		EvalTime($currentTime : evalTimeValue)
		$targetSeries : TargetSeries($recommendationDueDate : getFinalRecommendationDate() != null, 
			(recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE || 
				recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED),
			$recommendationDueDate > $currentTime && recommendationStatus == RecommendationStatus.RECOMMENDED || 
			$recommendationDueDate <= $currentTime && recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE)  	
	then
		String _RULENAME = kcontext.rule.name;
		$targetSeries.adjustRecommendationStatusByEvalTime(evalTime);
		$targetSeries.addSeriesRuleProcessed(_RULENAME);
      	ICELogicHelper.logDRLDebugMessage(_RULENAME, "Recommendation status adjusted for " + $recommendationDueDate + " in TargetSeries " + $targetSeries.getSeriesName());			
		update($targetSeries);	
end


///////// ***
// Supplemental Recommendation rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// Per ICE SME group, if recommendation is conditional, do not display a recommendation date.
///////// ***
rule "RecommendationForecast.doNotReturnForecastDateForConditionalRecommendations" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "supplementalSeriesRule"
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED, finalRecommendationDate != null)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setFinalRecommendationDate(null);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end


///////// ***
// Supplemental Recommendation rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If the list of recommended vaccines are inconsistent (i.e. - different interim recommendation forecasts with different vaccines), and the patient is recommended 
// for a forecast, then log the inconsistency and recommend at the vaccine group level
///////// ***
rule "RecommendationForecast.recommendedAtVaccineGroupLevelIfRecommendedVaccinesNotConsistent" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "supplementalSeriesRule"
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE ||
				recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED, finalRecommendations != null, $tsFinalRecommendations : finalRecommendations)
		HashSet(size > 1) from accumulate(Recommendation(recommendedVaccine != null, $accRecommendedVaccine : recommendedVaccine) from $tsFinalRecommendations, collectSet($accRecommendedVaccine))
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setRecommendationVaccine(null);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);	
end

	
///////// ***
// Supplemental Recommendation rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If the list of recommended vaccines are consistent and not all empty, and the patient is recommended for a forecast, then recommend at the vaccine level of the only specified vaccine
///////// ***
rule "RecommendationForecast.recommendedAtVaccineLevelIfRecommendedVaccinesConsistent" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "supplementalSeriesRule"
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE ||
			recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED, finalRecommendations != null, $tsFinalRecommendations : finalRecommendations)
		$recommendationVaccineSet : Set(size == 1) from accumulate(Recommendation(recommendedVaccine != null, $accRecommendedVaccine : recommendedVaccine) from $tsFinalRecommendations, collectSet($accRecommendedVaccine))
	then
		String _RULENAME = kcontext.rule.name;
		Iterator iter = $recommendationVaccineSet.iterator();
		if (iter.hasNext()) {
			Vaccine v = (Vaccine) iter.next();
			$ts.setRecommendationVaccine(v);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);	
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.finalizeRecommendationsForSeries" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_COMPLETE)	
		not Recommendation(targetSeriesIdentifier == $ts.targetSeriesIdentifier)	
	then
		String _RULENAME = kcontext.rule.name;
		$ts.finalizeRecommendationsForForecasting();
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Finalized recommendations for TargetSeries " + $ts.getSeriesName());
		update($ts);
		setFocus("supplementalSeriesRule");
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.addAnyRecommendationsOnFactListToSeries" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_COMPLETE)
		$recommendation : Recommendation(targetSeriesIdentifier == $ts.targetSeriesIdentifier)	
	then
		String _RULENAME = kcontext.rule.name;
		$ts.addInterimRecommendationForConsideration($recommendation, evalTime);
		retract($recommendation);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Finalized recommendations for TargetSeries " + $ts.getSeriesName());
		update($ts);
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "RecommendationForecast.allRecommendationRulesProcessedForSeries" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 95
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setRecommendationStatus(RecommendationStatus.FORECASTING_COMPLETE);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end


///////// ***
// Series Table rule... Do not Edit
// To follow CDC guidelines, could change this to only fire if a recommended age is available; then calculate earliest possible recommended date above
// using minimal age, minimum interval, etc. This separates the catch up schedule from the short recommendation intervals used by NYC
///////// ***
rule "RecommendationForecast.recommendBasedOnEarliestAgeRule" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 100
	activation-group "earliestAgeCheck"
	when
		// To follow CDC guidelines, could change this to check that a recommended age is provided
		$evalTime : EvalTime()
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS)
		$person : EvaluatedPerson()
	then
		String _RULENAME = kcontext.rule.name;
		$ts.recommendNextShotBasedOnEarliestAgeRule($person.demographics.birthTime, $evalTime.getEvalTimeValue());
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end 


///////// ***
// Series Table rule... Do not edit
// To follow CDC guidelines, could change this to only fire if a recommended age is not available
///////// ***
rule "RecommendationForecast.recommendBasedOnEarliestIntervalRule" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 100
	activation-group "earliestIntervalCheck"
	when
		$evalTime : EvalTime()
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS)
		//
	then
		String _RULENAME = kcontext.rule.name;
		$ts.recommendNextShotBasedOnEarliestIntervalRule($evalTime.getEvalTimeValue());
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end


///////// ***
// Series table rule... Do not Edit
// To follow CDC guidelines, could change this to only fire if a recommended age is available; then calculate earliest possible recommended date above
// using minimal age, minimum interval, etc. This separates the catch up schedule from the short recommendation intervals used by NYC
///////// ***
rule "RecommendationForecast.recommendBasedOnEarliestRecommendedAgeRule" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 100
	activation-group "recommendationAgeCheck"
	when
		$evalTime : EvalTime()
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS)
		$person : EvaluatedPerson()
	then
		String _RULENAME = kcontext.rule.name;
		$ts.recommendNextShotBasedOnEarliestRecommendedAgeRule($person.demographics.birthTime, $evalTime.getEvalTimeValue());
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end 


///////// ***
// Series Table rule... Do not Edit
///////// ***
rule "RecommendationForecast.recommendBasedOnRecommendedIntervalRule" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 100
	activation-group "recommendationIntervalCheck"
	when
		$evalTime : EvalTime()
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.recommendNextShotBasedOnEarliestRecommendedIntervalRule($evalTime.getEvalTimeValue());
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end


rule "RecommendationForecast.Do Not Apply Earliest Interval for Dose 1 if Prior Shot for Target Dose 1 was Invalid due to Below Minimum Age" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 101
	activation-group "earliestIntervalCheck"
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS, isSeriesComplete() == false, determineDoseNumberInSeries() == 1,
			$lastShotAdministered : lastShotAdministeredInSeries, $lastShotAdministered != null, $lastShotAdministered.doseNumberInSeries == 1,	
			$lastShotAdministered.getAdministeredVaccine().isLiveVirusVaccine() == false) 
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactConcept._BELOW_MINIMUM_AGE.conceptCodeValue, associatedTargetDose == $lastShotAdministered)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end


rule "RecommendationForecast.Do Not Apply Recommended Interval for Dose 1 if Prior Shot for Target Dose 1 was Invalid due to Below Minimum Age" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 101
	activation-group "recommendationIntervalCheck"
	when
		$ts : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS, isSeriesComplete() == false, determineDoseNumberInSeries() == 1,
			$lastShotAdministered : lastShotAdministeredInSeries, $lastShotAdministered != null, $lastShotAdministered.doseNumberInSeries == 1,
			$lastShotAdministered.getAdministeredVaccine().isLiveVirusVaccine() == false) 
		exists ICEFactTypeFinding(iceResultFinding == SupportedFactConcept._BELOW_MINIMUM_AGE.conceptCodeValue, associatedTargetDose == $lastShotAdministered)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts.seriesName);
end


///////// ***
// Series Table SEASONS rule... Do not Edit
// For seasonal series, recommend shot on the first date of the next season or at the time that the patient becomes of minimum age
// Overrides age check
///////// ***
rule "RecommendationForecast: Recommend Earliest Recommended Age Date in Next Series Season as Specified by Default Season Series Rule if no next Fully-Specified Season Defined and during the Off-Season of Current Seasonal Series" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 110
	activation-group "recommendationAgeCheck"
	when
		$ts : TargetSeries(recommendationStatus == recommendationStatus.FORECASTING_IN_PROGRESS, targetSeason != null, $vg : vaccineGroup,
			$offSeasonStartDate : targetSeason.fullySpecifiedSeasonOffSeasonStartDate != null, $offSeasonStartDate.toDate() <= evalTime,  
			$offSeasonEndDate : targetSeason.fullySpecifiedSeasonOffSeasonEndDate != null, $offSeasonEndDate.toDate() >= evalTime) 
		not Season(isDefaultSeason() == false, vaccineGroup == $vg, fullySpecifiedSeasonStartDate.toDate() == $offSeasonEndDate.plusDays(1).toDate())
		$defaultSeason : Season(isDefaultSeason() == true, vaccineGroup == $vg)
		$s : SeriesRules(vaccineGroup == $vg, $defaultSeason memberOf seasons, getSeriesDoseRuleByDoseNumber(1) != null,
			$recommendedAge : getSeriesDoseRuleByDoseNumber(1).getEarliestRecommendedAge() != null)
		$person : EvaluatedPerson($birthDate : demographics.birthTime)
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($birthDate, $offSeasonEndDate.plusDays(1).toDate(), $recommendedAge) > 0)		
	then
		String _RULENAME = kcontext.rule.name;
		Date calcRecDate = TimePeriod.addTimePeriod($birthDate, $recommendedAge);
		Recommendation recommendation = new Recommendation($ts);
		recommendation.setRecommendationDate(calcRecDate);
		$ts.addInterimRecommendationForConsideration(recommendation, evalTime);
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts);			
end


///////// ***
// Series Table SEASONS rule... Do not Edit
// Recommend earliest recommended age date in the next series for each series rules that have a recommended age and for which there is an associated fully-specified season
///////// ***
rule "RecommendationForecast: Recommend at Earliest Recommended Age Date in Next Series Season as Specified by TargetSeries if Fully-Specified Season Defined and if during the Off-Season of Current Seasonal Series" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 110
	activation-group "recommendationAgeCheck"
	when
		$ts : TargetSeries(recommendationStatus == recommendationStatus.FORECASTING_IN_PROGRESS, targetSeason != null, $vg : vaccineGroup,
			$offSeasonStartDate : targetSeason.fullySpecifiedSeasonOffSeasonStartDate != null, $offSeasonStartDate.toDate() <= evalTime,  
			$offSeasonEndDate : targetSeason.fullySpecifiedSeasonOffSeasonEndDate != null, $offSeasonEndDate.toDate() >= evalTime) 
		$fullySpecifiedNextseason : Season(isDefaultSeason() == false, vaccineGroup == $vg, fullySpecifiedSeasonStartDate.toDate() == $offSeasonEndDate.plusDays(1).toDate())
		$sr : SeriesRules(vaccineGroup == $vg, $fullySpecifiedNextseason memberOf seasons, getSeriesDoseRuleByDoseNumber(1) != null,
			$recommendedAge : getSeriesDoseRuleByDoseNumber(1).getEarliestRecommendedAge() != null)
		$person : EvaluatedPerson($birthDate : demographics.birthTime)
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($birthDate, $offSeasonEndDate.plusDays(1).toDate(), $recommendedAge) > 0)		
	then
		String _RULENAME = kcontext.rule.name;
		Date calcRecDate = TimePeriod.addTimePeriod($birthDate, $recommendedAge);
		Recommendation recommendation = new Recommendation($ts);
		recommendation.setRecommendationDate(calcRecDate);
		$ts.addInterimRecommendationForConsideration(recommendation, evalTime);
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts);			
end


///////// ***
// Series Table SEASONS rule... Do not Edit
// For seasonal series, patients should receive a shot on the first date of the next season if evaluation time is *after* the season ended in current series
// Overrides interval check.
///////// ***
rule "RecommendationForecast: Recommend Next Season Earliest Start Date if during the Off-Season of Current Seasonal Series" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 110
	activation-group "earliestIntervalCheck"	
	when
		$ts : TargetSeries(recommendationStatus == recommendationStatus.FORECASTING_IN_PROGRESS, targetSeason != null, 
			targetSeason.fullySpecifiedSeasonOffSeasonStartDate != null, targetSeason.fullySpecifiedSeasonOffSeasonEndDate != null,
			targetSeason.getFullySpecifiedSeasonOffSeasonStartDate().toDate() <= evalTime, targetSeason.getFullySpecifiedSeasonOffSeasonEndDate().toDate() >= evalTime)
	then
		String _RULENAME = kcontext.rule.name;
		Recommendation recommendation = new Recommendation($ts);
		recommendation.setRecommendationDate($ts.getTargetSeason().getFullySpecifiedSeasonOffSeasonEndDate().plusDays(1).toDate());
		$ts.addInterimRecommendationForConsideration(recommendation, evalTime);
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts);	
end


///////// ***
// Series Table SEASONS rule... Do not Edit
// For seasonal series, patients should receive a shot on the first date of the next season if evaluation time is *after* the season ended in current series
// Overrides interval check.
///////// ***
rule "RecommendationForecast: Recommend Next Season Recommended Start Date if during the Off-Season of Current Seasonal Series" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 110
	activation-group "recommendationIntervalCheck"	
	when
		$ts : TargetSeries(recommendationStatus == recommendationStatus.FORECASTING_IN_PROGRESS, targetSeason != null, 
			targetSeason.fullySpecifiedSeasonOffSeasonStartDate != null, targetSeason.fullySpecifiedSeasonOffSeasonEndDate != null,
			targetSeason.getFullySpecifiedSeasonOffSeasonStartDate().toDate() <= evalTime, targetSeason.getFullySpecifiedSeasonOffSeasonEndDate().toDate() >= evalTime)
	then
		String _RULENAME = kcontext.rule.name;
		Recommendation recommendation = new Recommendation($ts);
		recommendation.setRecommendationDate($ts.getTargetSeason().getFullySpecifiedSeasonOffSeasonEndDate().plusDays(1).toDate());
		$ts.addInterimRecommendationForConsideration(recommendation, evalTime);
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts);	
end


///////// ***
// Series Table rule... Do not Edit
// For seasonal series, if the series is complete, recommend that the patient receive a shot on the season start date of the next season
///////// ***
rule "RecommendationForecast: Recommend Next Season Start Date if Current Seasonal Series is Complete" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	salience 100
	when
		$ts : TargetSeries(recommendationStatus == recommendationStatus.FORECASTING_IN_PROGRESS, isSeriesComplete() == true, targetSeason != null, 
			targetSeason.fullySpecifiedSeasonOffSeasonEndDate != null)
	then
		String _RULENAME = kcontext.rule.name;
		Recommendation recommendation = new Recommendation($ts);
		recommendation.setRecommendationDate($ts.getTargetSeason().getFullySpecifiedSeasonOffSeasonEndDate().plusDays(1).toDate());
		$ts.addInterimRecommendationForConsideration(recommendation, evalTime);
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts);
end


///////// ***
// Series Table rule... Do not Edit
// For seasonal series, if the final recommendation date falls between the off-season start and end dates, modify the recommendation date to the
// beginning of the next season 
///////// ***
rule "RecommendationForecast/Post Recommendation Check: Recommend Next Season Start Date if Final Recommendation Date during Off-Season" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "postRecommendationCheck"
	when
		$ts : TargetSeries(isPostForecastCheckCompleted() == false, recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE || recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED, finalRecommendationDate != null, $pcvRecommendationDate : finalRecommendationDate, 
			targetSeason != null, finalRecommendationDate != null, targetSeason.fullySpecifiedSeasonOffSeasonStartDate != null, targetSeason.fullySpecifiedSeasonOffSeasonEndDate != null) 
		eval($ts.getFinalRecommendationDate().compareTo($ts.getTargetSeason().getFullySpecifiedSeasonOffSeasonStartDate().toDate()) >= 0 && 
			$ts.getFinalRecommendationDate().compareTo($ts.getTargetSeason().getFullySpecifiedSeasonOffSeasonEndDate().toDate()) <= 0)
	then
		String _RULENAME = kcontext.rule.name;
		Recommendation recommendation = new Recommendation($ts);
		recommendation.setRecommendationDate($ts.getTargetSeason().getFullySpecifiedSeasonOffSeasonEndDate().plusDays(1).toDate());
		$ts.addInterimRecommendationForConsideration(recommendation, evalTime);
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts);		
end


///////// ***
// Series Table rule... Do not Edit
// For seasonal series, if the final recommendation date falls after the season end-date and there is no off-season, mark the series NOT_RECOMMENDED and COMPLETE, as there will
// not be a next season (this is the one-and-only season as indicated by the fact that there is no off-season)
///////// ***
rule "RecommendationForecast/Post Recommendation Check: Recommend Not Recommended and Complete if Final Recommendation Date after End Date and there is no Off-Season" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "postRecommendationCheck"
	activation-group "postSeasonalSeriesNotRecommendedHandling"
	when
		$ts : TargetSeries(isPostForecastCheckCompleted() == false, recommendationStatus == RecommendationStatus.RECOMMENDED || recommendationStatus == RecommendationStatus.RECOMMENDED_IN_FUTURE || recommendationStatus == RecommendationStatus.CONDITIONALLY_RECOMMENDED, finalRecommendationDate != null, $pcvRecommendationDate : finalRecommendationDate, 
			targetSeason != null, finalRecommendationDate != null, targetSeason.fullySpecifiedSeasonOffSeasonEndDate == null) 
		eval($ts.getFinalRecommendationDate().compareTo($ts.getTargetSeason().getFullySpecifiedSeasonEndDate().toDate()) > 0)
	then
		String _RULENAME = kcontext.rule.name;
		Recommendation $recommendation = new Recommendation($ts); 
		$recommendation.setRecommendationStatus(RecommendationStatus.NOT_RECOMMENDED);
		$recommendation.setRecommendationReason(SupportedRecommendationConcept._NOT_RECOMMENDED_COMPLETE_REASON.getConcept());
		$ts.setSeriesComplete(true);
		$ts.addInterimRecommendationForConsideration($recommendation, evalTime);
		$ts.addSeriesRuleProcessed(_RULENAME);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetSeries " + $ts);		
end


///////// ***
// Supplemental Recommendation rule... modifying this rule not suggested; support for modifying this rule will be available in a future release
// If the patient is immune (for any reason) to all of the diseases handled by the TargetSeries, mark the series and forecasting complete
///////// ***
rule "RecommendNotRecommendedIfImmuneToAllDiseasesInSeries" ruleflow-group "RecommendationForecast"
	dialect "java"
	agenda-group "preRecommendationValidation"
	when
		$targetSeries : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS, $diseasesSupportedByThisSeries : diseasesSupportedByThisSeries)
		do[invokeCustomRecommendationRules]
		$diseaseImmunityList : List(size == $diseasesSupportedByThisSeries.size()) from 
			accumulate($di : DiseaseImmunity($d : disease, dateOfImmunity <= evalTime, $r : immunityReason, disease memberOf $diseasesSupportedByThisSeries), collectList($di))
	then
		String _RULENAME = drools.getRule().getName();
		Recommendation $recommendation = new Recommendation($targetSeries); 
		$recommendation.setRecommendationStatus(RecommendationStatus.NOT_RECOMMENDED);
		Iterator dilIter = $diseaseImmunityList.iterator();
		while (dilIter.hasNext()) {	// Just take the first available immunity reason
			DiseaseImmunity diConsequence = (DiseaseImmunity) dilIter.next();
			SupportedRecommendationConcept src = SupportedRecommendationConcept.getSupportedRecommendationConceptByConceptCode(diConsequence.getImmunityReason());
			if (src != null) {
				$recommendation.setRecommendationReason(src.getConcept());
				break;				
			}
		}
		$targetSeries.addInterimRecommendationForConsideration($recommendation, evalTime);
		$targetSeries.setSeriesComplete(true);
		modify ($targetSeries) {setRecommendationStatus(RecommendationStatus.FORECASTING_COMPLETE); }
		$targetSeries.addSeriesRuleProcessed(_RULENAME);
       	ICELogicHelper.logDRLDebugMessage(_RULENAME, "in TargetSeries " + $targetSeries.getSeriesName());
	then[invokeCustomRecommendationRules]
       	ICELogicHelper.logDRLDebugMessage(drools.getRule().getName(), "Check complete.");
       	drools.setFocus("customRecommendationRule");
end


/*****************************************************************************************************************************************************************************/
// 													Ruleflow group for returning results
/*****************************************************************************************************************************************************************************/


///////// ***
// General Design rule... Do not Edit
///////// ***
function void setShotValidity(SubstanceAdministrationEvent sae, TargetDose td) {
	
	if (sae == null || td == null) {
		return;
	}
	
	BL currShotValidity = sae.getIsValid();
	if (currShotValidity == null || currShotValidity.isValue() == true) {
		BL shotValidity = new BL();
		shotValidity.setValue(td.getIsValid());
		sae.setIsValid(shotValidity);
	}

}


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ProcessResults: Return Evaluations" ruleflow-group "ProcessResults"
	dialect "mvel"
	lock-on-active true
	salience 10
	when
		$sae : SubstanceAdministrationEvent()	
		$td : TargetDose(doseId == $sae.id)
		$ts : TargetSeries(containsTargetDose($td), $vaccineGroup : seriesRules.vaccineGroup)
		$evalTime: EvalTime()
	then
		String _RULENAME = kcontext.rule.name;
		PayloadHelper.OutputNestedImmEvaluationResult(drools, namedObjects, $evalTime, focalPersonId, $sae, $vaccineGroup, $td);
		$sae.setToBeReturned(true);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Results processing");	
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ProcessResults: Check Non-Seasonal Series Selection Consistency" ruleflow-group "ProcessResults"
	dialect "mvel"
	salience 20
	when
		$s : SeriesRules($vg : vaccineGroup)
		exists TargetSeries(vaccineGroup == $vg, targetSeason == null)
		accumulate($tsthis : TargetSeries(vaccineGroup == $vg, isSelectedSeries() == true, targetSeason == null); $countInVG : count($tsthis); $countInVG != 1)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.throwRuntimeException(new InconsistentConfigurationException("No series properly selected for vaccine group " + $vg));
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "No series properly selected for vaccine group " + $vg);			
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ProcessResults: Check Seasonal SeriesSelection Consistency" ruleflow-group "ProcessResults"
	dialect "mvel"
	salience 20
	when
		$season: Season(isDefaultSeason() == false, $vg : vaccineGroup)
		exists TargetSeries(vaccineGroup == $vg, targetSeason != null, targetSeason == $season)
		accumulate($tsthis : TargetSeries(vaccineGroup == $vg, isSelectedSeries() == true, targetSeason == $season); $countInVG : count($tsthis); $countInVG != 1)			
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.throwRuntimeException(new InconsistentConfigurationException("No series properly selected for vaccine group " + $vg));
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "No series properly selected for vaccine group " + $vg);			
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ProcessResults: Return Recommendation for Non-Seasonal Series" ruleflow-group "ProcessResults"
	dialect "mvel"
	lock-on-active true
	salience 10
	when
		$ts : TargetSeries(targetSeason == null)
		$evalTime: EvalTime()
	then
		String _RULENAME = kcontext.rule.name;
		PayloadHelper.OutputRootImmRecommendationSubstanceAdministrationProposal(drools, namedObjects, focalPersonId, $ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Results processing");	
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "ProcessResults: Return Recommendations For Seasonal Series" ruleflow-group "ProcessResults"
	dialect "mvel"
	lock-on-active true
	salience 10
	when
		$ts : TargetSeries($vg : vaccineGroup, targetSeason != null, isSelectedSeries() == true, $tseasonStartDate : targetSeason.fullySpecifiedSeasonStartDate)
		not TargetSeries(vaccineGroup == $vg, targetSeason != null,	targetSeason.fullySpecifiedSeasonStartDate.isAfter($tseasonStartDate)) 
	then
		String _RULENAME = kcontext.rule.name;
		PayloadHelper.OutputRootImmRecommendationSubstanceAdministrationProposal(drools, namedObjects, focalPersonId, $ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Results processing");	
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "BounceAllEntities" ruleflow-group "ProcessResults"
	dialect "mvel"
	when
		$entityBase : EntityBase( toBeReturned == false )
	then
		String _RULENAME = kcontext.rule.name;
		$entityBase.setToBeReturned( true );
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Results processing");	
end


///////// ***
// General Design rule... Do not Edit
///////// ***
rule "BounceAllClinicalStatements" ruleflow-group "ProcessResults"
	dialect "mvel"
	when
		$cs : ClinicalStatement( toBeReturned == false )
	then
		String _RULENAME = kcontext.rule.name;
		$cs.setToBeReturned( true );
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Results processing");	
end


//NOTE:  all demographics about the Patient are always returned in the result 
//			when the result is an outputVMR.

//NOTE2:  all ClinicalStatements, except ObservationResults are always returned as root elements

//NOTE3:  all Entities that have a relationship to a ClinicalStatement or to another Entity 
//			are always returned nested within that ClinicalStatement or Entity ONLY if that
//			ClinicalStatement or Entity is flagged toBeReturned.  

//NOTE4:  all Entities that are related directly to the patient will be returned or not
//			depending on the setting of the toBeReturned flag.


/*****************************************************************************************************************************************************************************/
// 															General Purpose Functions for use in Accumulate and Collects
/*****************************************************************************************************************************************************************************/

function List getAllDosesAcrossListOfTargetSeries(List tss) {

	List tds = new ArrayList();
	if (tss == null) {
		return tds;
	}
	
	Iterator iter = tss.iterator();
	while (iter.hasNext()) {
		TargetSeries ts = (TargetSeries) iter.next();
		Collection tsd = ts.getTargetDoses();
		if (tsd != null) {
			Iterator ii = tsd.iterator();
			while (ii.hasNext()) {
				TargetDose td = (TargetDose) ii.next();
				tds.add(td);
			}
		}
	}
	
	return tds;
}

