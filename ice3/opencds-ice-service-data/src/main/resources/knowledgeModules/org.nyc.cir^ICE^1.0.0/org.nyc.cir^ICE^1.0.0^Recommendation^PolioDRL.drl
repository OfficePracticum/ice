/**
 * Copyright (C) 2018 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package org.cdsframework.ice.v1_1_0

import java.util.List
import java.util.Set
import java.util.Date
import org.drools.spi.KnowledgeHelper
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.RecommendationStatus
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine
import org.joda.time.LocalDate

//declare any global variables here
global java.util.Date evalTime


rule "Polio: Earliest Age of 126d for Dose 4 if current date before 8/7/2010" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "customRecommendationRule"
	activation-group "earliestAgeCheck"
    when
		$targetSeries : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.400", isSeriesComplete() == false, 
			determineDoseNumberInSeries ==  4)
		$oEvaluatedPerson : EvaluatedPerson($dtBirthDate : demographics.birthTime)
		eval(evalTime.before(LocalDate.parse("2010-08-10").toDate()))
	then
		String _RULENAME = kcontext.rule.name;
		Date $dtCalculated = TimePeriod.addTimePeriod($dtBirthDate, new TimePeriod(126, DurationType.DAYS));
		Recommendation $recommendation = new Recommendation($targetSeries); 
		$recommendation.setEarliestDate($dtCalculated); 
		insert($recommendation);
		$targetSeries.addSeriesRuleProcessed(drools.getRule().getName());
       	ICELogicHelper.logDRLDebugMessage(_RULENAME, "in TargetSeries " + $targetSeries.getSeriesName());
end


rule "Polio: 28 day Earliest Interval of 28d From Dose 3 to Dose 4 if current date before 8/7/2010" ruleflow-group "RecommendationForecast"
	dialect "mvel"
	agenda-group "customRecommendationRule"
	activation-group "earliestIntervalCheck"
    when
		$targetSeries : TargetSeries(recommendationStatus == RecommendationStatus.FORECASTING_IN_PROGRESS, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.400", isSeriesComplete() == false, 
			determineDoseNumberInSeries ==  4, $dtAdministrationDate : lastShotAdministeredInSeries.administrationDate)
		eval(evalTime.before(LocalDate.parse("2010-08-10").toDate()))
	then
		String _RULENAME = kcontext.rule.name;
		Date $dtCalculated = TimePeriod.addTimePeriod($dtAdministrationDate, new TimePeriod(28, DurationType.DAYS));
		Recommendation $recommendation = new Recommendation($targetSeries); 
		$recommendation.setEarliestDate($dtCalculated); 
		insert($recommendation);
		$targetSeries.addSeriesRuleProcessed(drools.getRule().getName());
       	ICELogicHelper.logDRLDebugMessage(_RULENAME, "in TargetSeries " + $targetSeries.getSeriesName());
end

