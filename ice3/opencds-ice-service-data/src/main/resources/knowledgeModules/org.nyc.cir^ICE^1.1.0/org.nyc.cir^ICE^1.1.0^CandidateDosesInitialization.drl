/**
 * Copyright (C) 2016 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package org.cdsframework.ice.v1_1_0

import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.Set
import org.drools.spi.KnowledgeHelper
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.opencds.vmr.v1_0.internal.SubstanceAdministrationEvent
import org.opencds.vmr.v1_0.internal.concepts.ImmunizationConcept
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.RecommendationStatus
import org.cdsframework.ice.service.Schedule
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdatatmp.SupportedFactConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetDoseInitializationTracker
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine

global java.util.Date evalTime
global org.cdsframework.ice.service.Schedule schedule


///////////////////////////////////////////////////////////// PCV and PPSV Specific Series Initialization Rules /////////////////////////////////////////////////

// Specialized initialization rule for PCV and PPSV vaccine group
rule "CandidateDosesIdentification: Initialize TargetDose in PPSV or PCV Vaccine Group Series" ruleflow-group "CandidateDosesIdentification"
	dialect "java"
	agenda-group "customCandidateDosesIdentificationRule"
	salience 55
	no-loop true
	when
		$i : ImmunizationConcept($ctid : getConceptTargetId(), $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid)
		// SeriesRules fact check: Because according to NYC rules, the Pneumococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// (A Pneumococcal shot is sometimes be according to the rules associated with a series in the PCV vaccine group and sometimes associated with another 
		// a sries in a PPSV vaccine group. Thus, for PCV and PPSV vaccine groups, we instead check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other pneumococcal initialization rules (such as patient's age) -- allow initialization of the proper series 
		// with the shot). This is actually more restrictive in terms of letting a TargetDose be initialized within a TargetSeries		
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), 
			getVaccineGroup() == "VACCINE_GROUP_CONCEPT_PPSV" || getVaccineGroup() == "VACCINE_GROUP_CONCEPT_PCV", 
			vaccineIsAllowableInOneOrMoreDoseRules(schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, schedule.getVaccineByCdsConceptValue($occ)) == true)
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");
end


// Specialized initalization rule for PPSV and PCV when CVX 109 is administered. When CVX 109 (Pneumococcal NOS) is recorded for a patient => 5 years old, 
// ICE will evaluate the shot as part of the pneumococcal polysaccharide group.
rule "CandidateDosesIdentification: Initialize CVX109 Dose Into PPSV Series if Patient >= 5yrs" ruleflow-group "CandidateDosesIdentification"
	dialect "java"
	agenda-group "customCandidateDosesIdentificationRule"
	salience 60
	no-loop true
	when
		// This is a PCV 109 shot
		$i : ImmunizationConcept($ctid : getConceptTargetId(), getOpenCdsConceptCode() == "ICE109", $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid, $saeAdminDate : getAdministrationTimeInterval())
		// SeriesRules fact check: Because according to NYC rules, the Pneumococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// (A Pneumococcal shot is sometimes be according to the rules associated with a series in the PCV vaccine group and sometimes associated with another 
		// a sries in a PPSV vaccine group. Thus, for PCV and PPSV vaccine groups, we simply check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other pneumococcal initialization rules (such as patient's age) -- allow initialization of the proper series 
		// with the shot)		
		// PSV Series
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), getVaccineGroup() == "VACCINE_GROUP_CONCEPT_PPSV", 
			vaccineIsAllowableInOneOrMoreDoseRules(schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, schedule.getVaccineByCdsConceptValue($occ)) == true)
		$person : EvaluatedPerson()
		// Patient is >= 5 years of age at the time the shot was administered
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.getDemographics().getBirthTime(), ICELogicHelper.extractSingularDateValueFromIVLDate($saeAdminDate), "5y") >= 0)
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");
end


// Specialized initalization rule for PPSV and PCV when CVX 109 is administered. When CVX 109 (Pneumococcal NOS) is recorded for a patient < 5 years old, 
// ICE will evaluate the shot as part of the pneumococcal conjugate group. 
rule "CandidateDosesIdentification: Initialize CVX109 Dose Into PCV Series if Patient <5yrs" ruleflow-group "CandidateDosesIdentification"
	dialect "java"
	agenda-group "customCandidateDosesIdentificationRule"
	salience 60
	no-loop true
	when
		// This is a PCV 109 shot
		$i : ImmunizationConcept($ctid : getConceptTargetId(), getOpenCdsConceptCode() == "ICE109", $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid, $saeAdminDate : getAdministrationTimeInterval())
		// SeriesRules fact check: Because according to NYC rules, the Pneumococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// (A Pneumococcal shot is sometimes be according to the rules associated with a series in the PCV vaccine group and sometimes associated with another 
		// a sries in a PPSV vaccine group. Thus, for PCV and PPSV vaccine groups, we simply check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other pneumococcal initialization rules (such as patient's age) -- allow initialization of the proper series 
		// with the shot)		
		$schedule : Schedule()
		// PCV Series
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), getVaccineGroup() == "VACCINE_GROUP_CONCEPT_PPSV", 
			vaccineIsAllowableInOneOrMoreDoseRules($schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, schedule.getVaccineByCdsConceptValue($occ)) == true)
		$person : EvaluatedPerson()
		// Patient is >= 5 years of age at the time the shot was administered
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.getDemographics().getBirthTime(), ICELogicHelper.extractSingularDateValueFromIVLDate($saeAdminDate), "5y") < 0)	
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = $schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");
end
