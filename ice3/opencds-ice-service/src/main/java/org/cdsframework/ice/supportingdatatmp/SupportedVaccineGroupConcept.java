/**
 * Copyright (C) 2015 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */

package org.cdsframework.ice.supportingdatatmp;

import org.opencds.vmr.v1_0.internal.datatypes.CD;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//This class will be replaced for dynamic import of Supporting Data in a specified format generated by the Rule Authoring Tool         // 
//(e.g. - CAT). See opencds-ice-service-data/src/main/resources/ice-supporting-data/                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


public enum SupportedVaccineGroupConcept {
	
	HepB("ICE202", "Immunization Evaluation (Hep B Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"100", "Immunization Evaluation Focus (Hep B Vaccine Group)", 10),
	HepA("ICE205", "Immunization Evaluation (Hep A Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"810", "Immunization Evaluation Focus (Hep A Vaccine Group)", 0),		
	DTP("ICE203", "Immunization Evaluation (DTP Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"200", "Immunization Evaluation Focus (DTP Vaccine Group)", 0),
	Influenza("ICE276", "Immunization Evaluation (Influenza Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"800", "Immunization Evaluation Focus (Influenza Vaccine Group)", 0),
	// H1N1 series selection must occur before Influenza series selection
	H1N1("ICE277", "Immunization Evaluation (Influenza Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"890", "Immunization Evaluation Focus (H1N1 Influenza Vaccine Group)", 10),
	Hib("ICE204", "Immunization Evaluation (Hib Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"300", "Immunization Evaluation Focus (Hib Vaccine Group)", 0),
	HPV("ICE273", "Immunization Evaluation (HPV Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"840", "Immunization Evaluation Focus (HPV Vaccine Group)", 0),
	MMR("ICE270", "Immunization Evaluation (MMR Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"500", "Immunization Evaluation Focus (MMR Vaccine Group)", 0),
	Varicella("ICE271", "Immunization Evaluation (Varicella Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"600", "Immunization Evaluation Focus (Varicella Vaccine Group)", 0),
	PCV("ICE274", "Immunization Evaluation (PCV Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"700", "Immunization Evaluation Focus (PCV Vaccine Group)", 0),
	PPSV("ICE275", "Immunization Evaluation (PPSV Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"720", "Immunization Evaluation Focus (PPSV Vaccine Group)", 0),		
	Rotavirus("ICE272", "Immunization Evaluation (Rotavirus Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"820", "Immunization Evaluation Focus (Rotavirus Vaccine Group)", 0),
	Meningococcal("ICE278", "Immunization Evaluation (Meningococcal Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"830", "Immunization Evaluation Focus (Meningoccocal Vaccine Group)", 0),
	Polio("ICE279", "Immunization Evaluation (Polio Vaccine Group)", "2.16.840.1.113883.3.795.12.100.1", "ICE3 Immunization Focus", 
		"400", "Immunization Evaluation Focus (Polio Vaccine Group)", 0);
			
	
	// DTP, H1N1Influenza, HepA, HepB(10), Hib, Influenza, HPV, Meningococcal, MMR, PCV, PneumoPolysaccharide, Polio, Rotavirus, Varicella;
	private CD supportedVaccineGroupConcept;
	private CD localVaccineCodeConcept;
	private int priority;
	
	// private static Log logger = LogFactory.getLog(SupportedVaccineConcept.class);


	/**
	 * Support the SupportedVaccineGroupConcept with codes only (series selection priority is set to 0.)
	 * @param pConceptCodeValue
	 * @param pConceptDisplayNameValue
	 * @param pLocalCodeSystem
	 * @param pLocalCodeSystemName
	 * @param pLocalCodeValue
	 * @param pLocalCodeDisplayNameValue
	 */
	private SupportedVaccineGroupConcept(String pConceptCodeValue, String pConceptDisplayNameValue, String pLocalCodeSystem, String pLocalCodeSystemName, String pLocalCodeValue, 
			String pLocalCodeDisplayNameValue) {
		supportedVaccineGroupConcept = new CD();
		localVaccineCodeConcept = new CD();
		supportedVaccineGroupConcept.setCode(pConceptCodeValue);
		supportedVaccineGroupConcept.setDisplayName(pConceptDisplayNameValue);
		localVaccineCodeConcept.setCodeSystem(pLocalCodeSystem);
		localVaccineCodeConcept.setCodeSystemName(pLocalCodeSystemName);
		localVaccineCodeConcept.setCode(pLocalCodeValue);
		localVaccineCodeConcept.setDisplayName(pLocalCodeDisplayNameValue);
		priority = 0;
		// defaultSeasonStartDate = null;
		// defaultSeasonEndDate = null;
	}
	
	/**
	 * Construct the SupportedVaccineGroupConcept, complete with codes and a Series Selection Priority.
	 * @param pConceptCodeValue
	 * @param pConceptDisplayNameValue
	 * @param pLocalCodeSystem
	 * @param pLocalCodeSystemName
	 * @param pLocalCodeValue
	 * @param pLocalCodeDisplayNameValue
	 * @param pSeriesSelectionPriority
	 */
	private SupportedVaccineGroupConcept(String pConceptCodeValue, String pConceptDisplayNameValue, String pLocalCodeSystem, String pLocalCodeSystemName, String pLocalCodeValue, 
			String pLocalCodeDisplayNameValue, int pSeriesSelectionPriority) {
		
		this(pConceptCodeValue, pConceptDisplayNameValue, pLocalCodeSystem, pLocalCodeSystemName, pLocalCodeValue, pLocalCodeDisplayNameValue);
		priority = pSeriesSelectionPriority;
	}
	
	/**
	 * Construct the SupportedVaccineGroupConcept, complete with codes and default season.
	 *
	private SupportedVaccineGroupConcept(String pConceptCodeValue, String pConceptDisplayNameValue, String pLocalCodeSystem, String pLocalCodeSystemName, String pLocalCodeValue, 
			String pLocalCodeDisplayNameValue, int defaultSeasonStartMonth, int defaultSeasonStartDay, int defaultSeasonEndMonth, int defaultSeasonEndDay) {
		
		this(pConceptCodeValue, pConceptDisplayNameValue, pLocalCodeSystem, pLocalCodeSystemName, pLocalCodeValue, pLocalCodeDisplayNameValue);
		defaultSeasonStartDate = new MonthDay(defaultSeasonStartMonth, defaultSeasonStartDay);
		defaultSeasonEndDate = new MonthDay(defaultSeasonEndMonth, defaultSeasonEndDay);
	}
	*/
	
	/**
	 * Construct the SupportedVaccineGroupConcept, complete with codes, priority and default season.
	 * @param pConceptCodeValue
	 * @param pConceptDisplayNameValue
	 * @param pLocalCodeSystem
	 * @param pLocalCodeSystemName
	 * @param pLocalCodeValue
	 * @param pLocalCodeDisplayNameValue
	 * @param pSeriesSelectionPriority
	 * @param defaultSeasonStartMonth
	 * @param defaultSeasonStartDay
	 * @param defaultSeasonEndMonth
	 * @param defaultSeasonEndDay
	 *
	private SupportedVaccineGroupConcept(String pConceptCodeValue, String pConceptDisplayNameValue, String pLocalCodeSystem, String pLocalCodeSystemName, String pLocalCodeValue, 
			String pLocalCodeDisplayNameValue, int pSeriesSelectionPriority, int defaultSeasonStartMonth, int defaultSeasonStartDay, int defaultSeasonEndMonth, int defaultSeasonEndDay) {
		
		this(pConceptCodeValue, pConceptDisplayNameValue, pLocalCodeSystem, pLocalCodeSystemName, pLocalCodeValue, pLocalCodeDisplayNameValue, pSeriesSelectionPriority);
		defaultSeasonStartDate = new MonthDay(defaultSeasonStartMonth, defaultSeasonStartDay);
		defaultSeasonEndDate = new MonthDay(defaultSeasonEndMonth, defaultSeasonEndDay);
	}
	*/
	
	/**
	 * Return SupportedVaccineGroupConcept for its corresponding conceptCode value
	 * @param conceptCode
	 * @return SupportedVaccineGroupConcept, or null if no such SupportedVaccineGroupConcept exists for the specified concept code value
	 */
	public static SupportedVaccineGroupConcept getSupportedVaccineGroupConceptByConceptCode(String conceptCode) {

		if (conceptCode == null) {
			return null;
		}
		for (SupportedVaccineGroupConcept vc : SupportedVaccineGroupConcept.values()) {
			if (conceptCode.equals(vc.getConceptCodeValue())) {
				return vc;
			}
		}
		
		return null;
	}
	
	/*
	 * Return SupportedVaccineGroupConcept for its corresponding conceptCode value
	 * @param conceptCodeValue
	 * @return SupportedVaccineGroupConcept
	 * @throws IllegalArgumentException if no such SupportedVaccineGroupConcept exists for the specified concept code value
	public static SupportedVaccineGroupConcept getSupportedConceptByConceptCodeValue(String conceptCodeValue) {
		
		try {
			SupportedVaccineGroupConcept svc = SupportedVaccineGroupConcept.valueOf(conceptCodeValue);
			return svc;
		}
		catch (IllegalArgumentException iea) {
			String errStr = "No SupportedVaccineGroupConcepts exists for the supplied conceptCodeValue";
			logger.error(errStr);
			throw iea;
		}
	}
	*/
	
	public CD getConcept() {
		return supportedVaccineGroupConcept;
	}
	
	public String getConceptCodeValue() {
		return supportedVaccineGroupConcept.getCode();
	}
	
	public String getConceptDisplayNameValue() {
		return supportedVaccineGroupConcept.getDisplayName();
	}
	
	public CD getLocalCodeConcept() {
		return localVaccineCodeConcept;
	}
	
	public String getLocalCodeSystem() {
		return localVaccineCodeConcept.getCodeSystem();
	}
	
	public String getLocalCodeSystemName() {
		return localVaccineCodeConcept.getCodeSystemName();
	}
	
	public String getLocalCodeValue() {
		return localVaccineCodeConcept.getCode();
	}
	
	public String getLocalCodeDisplayName() {
		return localVaccineCodeConcept.getDisplayName();
	}
	
	public int getSeriesSelectionPriority() {
		return priority;
	}

	/*
	public MonthDay getDefaultSeasonStartDate() {
		return defaultSeasonStartDate;
	}

	public MonthDay getDefaultSeasonEndDate() {
		return defaultSeasonEndDate;
	}
	*/
}

